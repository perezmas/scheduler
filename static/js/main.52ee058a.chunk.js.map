{"version":3,"sources":["hooks/useYears.ts","hooks/useProblems.ts","components/ErrorStack.tsx","hooks/useCourses.ts","util/validation/dates.ts","components/Year/YearHeader.tsx","components/AddCourse.tsx","components/Course.tsx","components/Semester.tsx","components/SemesterDropPoint.tsx","components/Year/SemesterList.tsx","components/Year/FormTrigger.tsx","components/Year/SemesterForm.tsx","components/Year/Year.tsx","components/MetRequirementsTable.tsx","components/ExportCSV.tsx","components/Scheduler.tsx","util/events/SemesterFormEvents.ts","components/Requirements.tsx","components/SchedulerWalkthrough.tsx","components/MainPageWalkthrough.tsx","components/NavigationBar.tsx","components/PlanPage.tsx","components/IndexPage.tsx","hooks/usePlans.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getByUUID","state","uuid","i","length","yearReducer","prev","action","next","map","x","type","semAction","targetIndex","target","newYear1","Array","concat","semesters","push","name","start","end","semesterUuid","index","addYear","newYear2","removeSemester","newYear","filter","semester","removeYear","value","Error","useYears","init","useReducer","undefined","years","updateYears","putSemester","removeYears","yearRemover","yearUuid","clearYears","pusher","semesterRemover","newYears","year","clearSemesters","problemReducer","newState","error","message","source","problemType","realAction","splice","problem","output","initializer","ErrorStack","props","problems","ctr","className","ReactDOM","createPortal","document","getElementById","body","courseReducer","course","newCourse","id","payload","courseInit","courses","useCourses","initialCourses","updateCourses","courseList","removeCourse","move","destinationUuid","old","validate","existing","getTime","validate_both_dates","validate_single_date","date","YearHeader","Container","fluid","trigger","onClick","e","stopPropagation","Dropdown","as","ButtonGroup","Button","clearYear","variant","Toggle","split","Menu","Item","style","color","transitionTime","Card","Row","md","overflow","padding","children","AddCourse","isOpen","onClickClose","Form","onSubmit","onClickSubmit","Group","Col","controlId","Label","Control","placeholder","defaultValues","onChange","Text","href","defaultValue","requirements","requirement","credits","Check","label","checked","coreqs","includes","prereqs","description","height","isEditing","Course","useDrag","item","drag","CustomToggle","React","forwardRef","ref","preventDefault","displayName","draggable","display","onClickEdit","getEmptyCourse","Semester","useState","setNewCourse","setIsOpen","setIsEditing","semesterCourses","useMemo","totalCredits","reduce","previousValue","currentValue","event","handleCourseSubmit","courseToAdd","parseInt","Header","justifyContent","clearCourses","ListGroup","ListGroupItem","Footer","SemesterDropPoint","useDrop","accept","drop","acceptCourse","SemesterList","sortedSemesters","sort","a","b","array","count","newSemester","semesterProps","moveCourse","addCourse","FormTrigger","overlayButton","useRef","bg","flex","setForm","currentForm","YearUuid","Overlay","placement","show","onHide","rootClose","transition","Popover","PopoverContent","SemesterForm","handleSubmit","handleInput","disabled","canSubmit","Year","submissionAllowed","handleSemesterInput","handleSemesterSubmit","MetRequirementsTable","Table","unmetRequirements","indexOf","ExportCSV","csv","forEach","join","csvFile","Blob","FileSaver","saveAs","getStartingYears","Date","getFullYear","yearOne","yearTwo","hasError","Scheduler","scheduleProps","getCurrentYears","currentCourses","planId","plans","planList","scheduleId","plan","setUnmetRequirements","newName","setNewName","newStart","setNewStart","newEnd","setNewEnd","setCurrentForm","setSubmissionAllowed","dispatchOutput","add","resolve","clear","useProblems","newProblems","newDate","handleSemesterFormInput","resetForm","addSemester","handleSemesterFormSubmit","getByCourseID","courseID","useEffect","newCourses","setYears","setCourses","Requirements","onRemoveRequirement","onAddRequirement","newRequirement","setNewRequirement","xs","lg","InputGroup","width","FormControl","el","title","SchedulerWalkthrough","run","steps","disableBeacon","content","joyride","setJoyride","marginRight","textAlign","continuous","showProgress","showSkipButton","styles","tooltipContainer","buttonNext","backgroundColor","buttonBack","locale","last","skip","MainPageWalkthrough","marginLeft","opacity","cursor","NavigationBar","Navbar","expand","Brand","Link","to","Collapse","Nav","NavDropdown","Divider","rel","PlanPage","renderCard","planItem","localStorage","setItem","JSON","stringify","alignItems","Body","Title","fontWeight","fontSize","copyPlan","copy","window","confirm","deletePlan","deleteCard","addPlan","IndexPage","PlanReducer","NewPlan","NewCopiedPlan","yearList","setSemesters","semesterList","usePlans","initialPlans","setPlans","Plan","match","params","DndProvider","backend","HTML5Backend","App","setRequirements","addRequirement","removeRequirement","r","path","render","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"qSA0CO,SAASA,EACZC,EACAC,GAEA,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC9B,GAAIF,EAAME,GAAGD,OAASA,EAClB,OAAOC,EAGf,OAAQ,EAUZ,SAASE,EACLC,EACAC,GAEA,IAAMC,EAAOF,EAAKG,KAAI,SAACC,GACnB,OAAO,eAAIA,MAEf,OAAQH,EAAOI,MACf,IAAK,eACD,IAAMC,EAA+BL,EAC/BM,EAAsBb,EAAUQ,EAAMI,EAAUV,MAChDY,EAAmBN,EAAKK,GACxBE,GAAW,IAAIC,OAAuBC,OACxCH,EAAOI,WAaX,OAXAH,EAASI,KAAK,CACVC,KAAMR,EAAUQ,KAChBC,MAAOT,EAAUS,MACjBC,IAAKV,EAAUU,IACfpB,KAAMU,EAAUW,eAEpBf,EAAKK,GAAe,CAChBW,MAAOhB,EAAKK,GAAaW,MACzBtB,KAAMM,EAAKK,GAAaX,KACxBgB,UAAWH,GAERP,EAEX,IAAK,WACD,IAAMiB,EAAUlB,EACVmB,EAAqB,CACvBF,MAAOC,EAAQD,MACftB,KAAMuB,EAAQvB,KACdgB,UAAW,IAAIF,OAGnB,OADAR,EAAKW,KAAKO,GACHlB,EAEX,IAAK,kBACD,IAAMmB,EAAiBpB,EACjBM,EAAsBb,EAAUQ,EAAMmB,EAAezB,MAErD0B,EADuBpB,EAAKK,GACPK,UAAUW,QACjC,SAACC,GACG,OAAOA,EAAS5B,OAASyB,EAAeJ,gBAQhD,OALAf,EAAKK,GAAe,CAChBW,MAAOhB,EAAKK,GAAaW,MACzBtB,KAAMM,EAAKK,GAAaX,KACxBgB,UAAWU,GAERpB,EAEX,IAAK,cACD,IAAMuB,EAAaxB,EAInB,OAHeC,EAAKqB,QAAO,SAACG,GACxB,OAAOA,EAAM9B,OAAS6B,EAAW7B,QAIzC,QACI,MAAM+B,MAAM,GAAD,OAAI1B,EAAOI,KAAX,uBA6IJuB,MA7Df,SAAkBC,GACd,MAA6BC,qBACzB/B,OACAgC,OACSA,IAATF,EACM,WACE,OAAO,IAAInB,OAEbmB,GAPV,mBAAOG,EAAP,KAAcC,EAAd,KAUMpB,EAAO,SAACjB,EAAcsB,GACxBe,EAAY,CACR5B,KAAM,WACNT,KAAMA,EACNsB,MAAOA,KAmBTG,EAAiB,SAACzB,EAAcqB,GAClCgB,EAAY,CACR5B,KAAM,kBACNT,KAAMA,EACNqB,aAAcA,KAGhBQ,EAAa,SAAC7B,GAChBqC,EAAY,CACR5B,KAAM,cACNT,KAAMA,KAGd,MAAO,CACH8B,MAAOM,EACPnB,OACAqB,YAhCgB,SAChBtC,EACAqB,EACAF,EACAC,EACAF,GAEAmB,EAAY,CACR5B,KAAM,eACNT,KAAMA,EACNkB,KAAMA,EACNC,MAAOA,EACPC,IAAKA,EACLC,aAAcA,KAoBlBI,iBACAc,YAAa,SAACvC,IAjItB,SACIoC,EAEAI,EACAC,GAEA,QAAiBN,IAAbM,GAAuC,KAAbA,EAC1BD,EAAYC,QACT,QAAiBN,IAAbM,GAAuC,KAAbA,EAAiB,CAAC,IAAD,gBAC/BL,GAD+B,IAClD,2BACII,EADsB,QACLxC,MAF6B,gCA0H9CuC,CAAYH,EAAOP,EAAY7B,IAEnC0C,WAAY,SAAC1C,IAtHrB,SACIoC,EACAO,EACAC,EACAJ,EACAC,GAEA,QAAiBN,IAAbM,IAA0D,IAAhC3C,EAAUsC,EAAOK,GAAkB,CAAC,IAAD,gBACtCL,EAAMtC,EAAUsC,EAAOK,IAAWzB,WADI,IAC7D,2BACI4B,EAAgBH,EADgD,QAC7BzC,MAFsB,oCAI1D,QAAiBmC,IAAbM,EAAwB,CAC/B,IAD+B,EACzBI,EAAuB,IAAI/B,MADF,cAEZsB,GAFY,IAE/B,2BAA0B,CAAC,IAAhBU,EAAe,QACtBD,EAAS5B,KAAK,CACVD,UAAW,GACXM,MAAOwB,EAAKxB,MACZtB,KAAM8C,EAAK9C,OAEfwC,EAAYM,EAAK9C,OARU,8BAU/B,cAAmB6C,EAAnB,eAA6B,CAAxB,IAAMC,EAAI,KACXH,EAAOG,EAAK9C,KAAM8C,EAAKxB,SAiGvByB,CAAeX,EAAOnB,EAAMQ,EAAgBI,EAAY7B,M,SC5NpE,SAASgD,EAA2D5C,EAAsBC,GACtF,IAAM4C,EAA2B7C,EAAKG,KAAI,SAACuB,GACvC,MAAO,CAACoB,MAAOpB,EAAMoB,MAAOC,QAASrB,EAAMqB,QAASC,OAAQtB,EAAMsB,OAAQC,YAAavB,EAAMuB,gBAEjG,OAAOhD,EAAOI,MACd,IAAK,eAED,IADA,IAAM6C,EAAajD,EACXJ,EAAI,EAAGA,EAAIgD,EAAS/C,OAAQD,IAC7BgD,EAAShD,GAAGoD,cAAgBC,EAAW1C,QACtCqC,EAASM,OAAOtD,EAAE,GAG1B,OAAOgD,EACV,IAAK,MACF,IAAMK,EAAajD,EAEnB,OADA4C,EAAShC,KAAKqC,EAAWE,SAClBP,EACV,IAAK,QAGF,IAFA,IAAMK,EAAajD,EACboD,EAAyB,IAAI3C,MAC3Bb,EAAI,EAAEA,EAAIgD,EAAS/C,OAAQD,IAC5BgD,EAAShD,GAAGmD,SAAWE,EAAWF,QACjCK,EAAOxC,KAAKgC,EAAShD,IAG7B,OAAOwD,GAiBf,SAASC,IACL,OAAO,IAAI5C,M,WCxEA,SAAS6C,EAAWC,GAC/B,GAAuB,OAAnBA,EAAMC,SAAmB,CACzB,IAAMC,EAAM,CACR,sBAAKC,UAAU,gBAAf,UACKH,EAAMC,SAAS3D,OAAQ,IACG,IAA1B0D,EAAMC,SAAS3D,OAAe,QAAU,WAFT,IAMxC,OAAO8D,IAASC,aAEZ,qBAAKF,UAAU,cAAf,SACI,qBAAKA,UAAU,cAAf,SACKD,EAAI/C,OACD6C,EAAMC,SAAStD,KACX,SAACiD,EAAkBlC,GACf,OACI,sBACIyC,UACIP,EAAQN,MAAQ,QAAU,UAG9B,cACIM,EAAQN,MAAQ,QAAU,UANlC,SASKM,EAAQL,SALJ7B,EAAQ,WAczC4C,SAASC,eAAe,eAA4BD,SAASE,MAGjE,OAAO,sBAAM,cAAY,cCjBjC,SAASC,EAA0EtE,EAAyBM,GACxG,IAAM4C,EAAWlD,EAAMQ,KAAI,SAAC+D,GACxB,OAAO,eAAIA,MAEf,OAAQjE,EAAOI,MACf,IAAK,aACD,IAAM6C,EAAajD,EAEnB,OADA4C,EAAShC,KAAT,eAAkBqC,EAAWiB,YACtBtB,EAEX,IAAK,gBACD,IACMrC,EAASd,EAAUmD,EADN5C,EAC2BL,MAI9C,OAHgB,IAAZY,GACAqC,EAASM,OAAO3C,EAAQ,GAErBqC,EAEX,IAAK,gBACD,IAAMK,EAAajD,EACbO,EAASd,EAAUmD,EAAUK,EAAWkB,IAG9C,OAFAvB,EAASM,OAAO3C,EAAQ,GACxBqC,EAAShC,KAAKqC,EAAWmB,SAClBxB,EAEX,QACI,MAAM,IAAIlB,MAAM,wBAIxB,IAAM2C,EAAa,SAACC,GAChB,YAAmBxC,IAAZwC,EAAwB,GAAKA,GA4DzBC,MAnDf,SAAoBC,GAChB,MAAiC3C,qBAC7BmC,EACAQ,EACAH,GAHJ,mBAAOC,EAAP,KAAgBG,EAAhB,KA2CA,MAAO,CACHC,WAAYJ,EACZK,aAtBW,SAAChF,GACZ8E,EAAc,CACVrE,KAAM,gBACNT,KAAMA,KAoBViB,KAxCS,SAACqD,GAEV,IAAM1D,EAASd,EAAU6E,EAASL,EAAOtE,MAErC8E,GADY,IAAZlE,EACc,CACVH,KAAM,gBACN+D,GAAIF,EAAOtE,KACXyE,QAASH,GAGC,CACV7D,KAAM,aACN8D,UAAWD,KA6BnBW,KAjBS,SAACjF,EAAckF,GACxB,IAAMtE,EAASd,EAAU6E,EAAS3E,GAClC,IAAc,GAAXY,EAAa,CACZ,IAAMuE,EAAG,eAAOR,EAAQ/D,IACxBuE,EAAIvD,SAAWsD,EACfJ,EAAc,CACVrE,KAAM,gBACN+D,GAAIxE,EACJyE,QAASU,Q,yBC3GV,SAASC,EAASjE,EAAoBC,EAAkBiE,EAAgCjC,GACnG,OAAa,OAAVjC,GAA0B,OAARC,EAWzB,SAA6BD,EAAaC,EAAWiE,GACjD,IAAM5B,EAAS,IAAI3C,MAChBK,EAAMmE,WAAalE,EAAIkE,UACtB7B,EAAOxC,KAAK,CAACiC,OAAO,EAAME,OAAQ,gBAAiBD,QAAS,yCAA2CE,YAAa,+BAC/GjC,EAAIkE,UAAYnE,EAAMmE,WAAa,SACxC7B,EAAOxC,KAAK,CAACiC,OAAO,EAAOE,OAAQ,gBAAiBD,QAAS,6DAA8DE,YAAa,mBAL5C,oBAQ1EgC,GAR0E,IAQhG,IAAI,EAAJ,qBAA+B,CAAC,IAAtBzD,EAAqB,QACxBR,EAAIkE,WAAa1D,EAAST,MAAMmE,WAAa1D,EAASR,IAAIkE,WAAanE,EAAMmE,WAC5E7B,EAAOxC,KAAK,CAACiC,OAAO,EAAME,OAAQ,gBAAiBD,QAAQ,qBAAD,OAAuBvB,EAASV,MAASmC,YAAa,sBAVxB,8BAahG,OAAOI,EAvBI8B,CAAoBpE,EAAOC,EAAIiE,GACvB,OAAVlE,EACEqE,EAAqBrE,EAAOkE,EAAUjC,GAChC,OAARhC,EACEoE,EAAqBpE,EAAKiE,EAAUjC,GAEpC,GAqBf,SAASoC,EAAqBC,EAAYJ,EAAgCjC,GACtE,IADqG,EAC/FK,EAAS,IAAI3C,MADkF,cAE/EuE,GAF+E,IAErG,IAAI,EAAJ,qBAA+B,CAAC,IAAtBzD,EAAqB,QACxB6D,EAAKH,UAAY1D,EAAST,MAAMmE,WAAaG,EAAKH,UAAY1D,EAASR,IAAIkE,WAC1E7B,EAAOxC,KAAK,CAACiC,OAAO,EAAME,OAAQ,gBAAiBD,QAAQ,GAAD,OAAKC,EAAL,0BAA6BxB,EAASV,MAAQmC,YAAY,YAAD,OAAcD,EAAd,eAJtB,8BAOrG,OAAOK,E,gDCrBI,SAASiC,EAAW9B,GAC/B,OACI,cAAC+B,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,cAAC,IAAD,CACIC,QACI,sBACI,6BAAqBjC,EAAMtC,MAA3B,UACAyC,UAAU,0BAFd,yBAIaH,EAAMtC,OACf,qBACIwE,QAAS,SAACC,GACNA,EAAEC,mBAFV,SAKI,eAACC,EAAA,EAAD,CAAUC,GAAIC,IAAd,UACI,cAACC,EAAA,EAAD,CACIN,QAASlC,EAAMyC,UACf,mCAA2BzC,EAAMtC,OACjCgF,QAAQ,UAHZ,wBAQA,cAACL,EAAA,EAASM,OAAV,CACIC,OAAK,EACLF,QAAQ,UACR9B,GAAG,uBACH,cAAY,kBAGhB,cAACyB,EAAA,EAASQ,KAAV,UACI,cAACR,EAAA,EAASS,KAAV,CACIC,MAAO,CAAEC,MAAO,WAChBd,QAASlC,EAAM/B,WACf,oCAA4B+B,EAAMtC,OAHtC,mCAYpBuF,eAAgB,IAzCpB,SA2CI,cAACC,EAAA,EAAD,CAAM/C,UAAU,OAAhB,SACI,cAACgD,EAAA,EAAD,CACIC,GAAI,EACJL,MAAO,CAAEM,SAAU,OAAQC,QAAS,mBACpC,cAAY,sBAHhB,SAKKtD,EAAMuD,iB,sCC4HhBC,EAxKG,SAACxD,GACf,OAAKA,EAAMyD,OACJrD,IAASC,aACZ,8BACI,sBAAKF,UAAU,mBAAmB,cAAY,mBAA9C,UACI,cAACqC,EAAA,EAAD,CACIE,QAAQ,SACRR,QAASlC,EAAM0D,aACf,cAAY,oBAHhB,oBAQA,eAACC,EAAA,EAAD,CAAMC,SAAU5D,EAAM6D,cAAe,cAAY,cAAjD,UACI,eAACV,EAAA,EAAD,CAAKhD,UAAU,OAAf,UACI,eAACwD,EAAA,EAAKG,MAAN,CACI3D,UAAU,OACVmC,GAAIyB,IACJC,UAAU,aAHd,UAKI,cAACL,EAAA,EAAKM,MAAN,0BACA,cAACN,EAAA,EAAKO,QAAN,CACIrH,KAAK,OACLsH,YAAY,oBACZ,cAAY,kBACZ7G,KAAK,aACLY,MAAO8B,EAAMoE,cAAc9G,KAC3B+G,SAAUrE,EAAMqE,WAEpB,eAACV,EAAA,EAAKW,KAAN,CAAWnE,UAAU,aAArB,mCAC2B,IACvB,mBAAGoE,KAAK,uCAAR,kBAEK,IAJT,uBAQJ,eAACZ,EAAA,EAAKG,MAAN,CACI3D,UAAU,OACVmC,GAAIyB,IACJC,UAAU,WAHd,UAKI,cAACL,EAAA,EAAKM,MAAN,wBACA,eAACN,EAAA,EAAKO,QAAN,CACI5B,GAAG,SACHhF,KAAK,WACL,aAAW,mDACX+G,SAAUrE,EAAMqE,SAChBG,aAAcxE,EAAMoE,cAAcxD,GALtC,UAOI,iCACKZ,EAAMoE,cAAcxD,GAAGtE,OAAS,EAC3B0D,EAAMoE,cAAcxD,GACpB,uBAETZ,EAAMyE,aAAa9H,KAAI,SAAC+H,GACrB,OACI,wBAEIxG,MAAOwG,EAFX,SAIKA,GAHIA,SAQrB,cAACf,EAAA,EAAKW,KAAN,CAAWnE,UAAU,aAArB,sIAOR,eAACgD,EAAA,EAAD,WACI,eAACQ,EAAA,EAAKG,MAAN,CACI3D,UAAU,OACVmC,GAAIyB,IACJC,UAAU,gBAHd,UAKI,cAACL,EAAA,EAAKM,MAAN,gCACA,cAACN,EAAA,EAAKO,QAAN,CACIrH,KAAK,SACLS,KAAK,gBACL6G,YAAY,QACZjG,MAAO8B,EAAMoE,cAAcO,QAC3BN,SAAUrE,EAAMqE,cAGxB,eAACV,EAAA,EAAKG,MAAN,CAAY3D,UAAU,OAAOmC,GAAIyB,IAAjC,UACI,cAACJ,EAAA,EAAKM,MAAN,kCACCjE,EAAMe,QAAQzE,OAAS,EACpB0D,EAAMe,QACDhD,QACG,SAAC2C,GAAD,OACIA,EAAOE,IAAMZ,EAAMoE,cAAcxD,MAExCjE,KAAI,SAAC+D,GAAD,OACD,cAACiD,EAAA,EAAKiB,MAAN,CACI,2BAAmBlE,EAAOpD,MAE1BT,KAAK,WACLgI,MAAOnE,EAAOpD,KACdA,KAAK,qBACLY,MAAOwC,EAAOE,GACdkE,QAAS9E,EAAMoE,cAAcW,OAAOC,SAChCtE,EAAOE,IAEXyD,SAAUrE,EAAMqE,UARX3D,EAAOtE,SAYxB,kEAGR,eAACuH,EAAA,EAAKG,MAAN,CAAY3D,UAAU,OAAOmC,GAAIyB,IAAjC,UACI,cAACJ,EAAA,EAAKM,MAAN,mCACCjE,EAAMe,QAAQzE,OAAS,EACpB0D,EAAMe,QACDhD,QACG,SAAC2C,GAAD,OACIA,EAAOE,IAAMZ,EAAMoE,cAAcxD,MAExCjE,KAAI,SAAC+D,GAAD,OACD,cAACiD,EAAA,EAAKiB,MAAN,CAEI,4BAAoBlE,EAAOpD,MAC3BT,KAAK,WACLgI,MAAOnE,EAAOpD,KACdA,KAAK,sBACLY,MAAOwC,EAAOE,GACdkE,QAAS9E,EAAMoE,cAAca,QAAQD,SACjCtE,EAAOE,IAEXyD,SAAUrE,EAAMqE,UATX3D,EAAOtE,SAaxB,qEAKZ,eAACuH,EAAA,EAAKG,MAAN,CAAY3D,UAAU,OAAO6D,UAAU,oBAAvC,UACI,cAACL,EAAA,EAAKM,MAAN,6CACA,cAACN,EAAA,EAAKO,QAAN,CACI5G,KAAK,oBACLgF,GAAG,WACH6B,YAAY,oCACZjG,MAAO8B,EAAMoE,cAAcc,YAC3Bb,SAAUrE,EAAMqE,SAChBtB,MAAO,CAAEoC,OAAQ,cAIzB,cAAC3C,EAAA,EAAD,CACIE,QAAQ,UACR7F,KAAK,SACL,cAAY,uBAHhB,SAKKmD,EAAMoF,UAAY,cAAgB,uBAKnD9E,SAASC,eAAe,eAA4BD,SAASE,MAnKvC,M,SC+Df6E,EA7EA,SAACrF,GACZ,MAAiBsF,aACb,iBAAO,CACHzI,KAAM,SACN0I,KAAM,CACFnJ,KAAM4D,EAAM5D,SAGpB,CAAC4D,EAAM5D,OAPFoJ,EAAT,oBAaMC,EAAeC,IAAMC,YACvB,SAAC3F,EAAoB4F,GAArB,OACI,mBACIzF,UAAU,oBACV,cAAY,yBACZoE,KAAK,GACLqB,IAAKA,EACL1D,QAAS,SAACC,GACNA,EAAE0D,iBACE7F,EAAMkC,SAASlC,EAAMkC,QAAQC,IAPzC,SAUKnC,EAAMuD,cAOnB,OAFAkC,EAAaK,YAAc,eAGvB,sBACIF,IAAKJ,EACLO,WAAW,EACX,+BAAuB/F,EAAMY,GAA7B,aAAoCZ,EAAM1C,MAC1C6C,UAAU,SAJd,UAMI,qBAAK4C,MAAO,CAAEiD,QAAS,gBAAvB,mBACQhG,EAAM2E,QADd,YACyB3E,EAAM1C,QAE/B,eAAC+E,EAAA,EAAD,CAAUU,MAAO,CAAEiD,QAAS,gBAA5B,UACI,cAAC3D,EAAA,EAASM,OAAV,CAAiBL,GAAImD,EAArB,SACI,mBACItF,UAAU,mBACV,cAAY,sBAIpB,eAACkC,EAAA,EAASQ,KAAV,WACI,cAACR,EAAA,EAASS,KAAV,CACI3C,UAAU,UACV,cAAY,qBACZ+B,QAAS,WACLlC,EAAMiG,YAAYjG,EAAM5D,OAJhC,kBASA,cAACiG,EAAA,EAASS,KAAV,CACIC,MAAO,CAAEC,MAAO,WAChB7C,UAAU,UACV,sCAA8BH,EAAMY,IACpCsB,QAAS,WACLlC,EAAMoB,aAAapB,EAAM5D,OALjC,8BC3CpB,SAAS8J,EAAelI,GACpB,MAAO,CACH4C,GAAI,GACJtD,KAAM,GACN4H,YAAa,GACbP,QAAS,EACT3G,SAAUA,EACV+G,OAAQ,GACRE,QAAS,GACT7I,KAAMA,eAKd,IAAM+J,EAAWT,IAAMC,YACnB,SACI3F,EACA4F,GAEA,MAAkCQ,oBAAqB,WACnD,OAAOF,EAAelG,EAAM5D,SADhC,mBAAOuE,EAAP,KAAkB0F,EAAlB,KAGA,EAA4BD,oBAAS,GAArC,mBAAO3C,EAAP,KAAe6C,EAAf,KACA,EAAkCF,oBAAS,GAA3C,mBAAOhB,EAAP,KAAkBmB,EAAlB,KAqCMN,EAAc,SAAC7J,GACjBiK,EAAarG,EAAMe,QAAQ7E,EAAU8D,EAAMe,QAAS3E,KACpDkK,GAAU,GACVC,GAAa,IASXC,EAAkBC,mBAAQ,WAC5B,OAAOzG,EAAMe,QAAQhD,QAAO,SAAC2C,GACzB,OAAOA,EAAO1C,WAAagC,EAAM5D,UAEtC,CAAC4D,EAAMe,UAEJ2F,EAAeD,mBAAQ,WACzB,OAAOD,EAAgBG,QACnB,SAACC,EAA2BC,GACxB,MAAO,CACHjG,GAAI,GACJsE,YAAa,GACb5H,KAAM,GACNqH,QAASiC,EAAcjC,QAAUkC,EAAalC,QAC9C3G,SAAU,GACV+G,OAAQ,GACRE,QAAS,GACT7I,KAAM,MAGd,CACIwE,GAAI,GACJsE,YAAa,GACb5H,KAAM,GACNqH,QAAS,EACTI,OAAQ,GACRE,QAAS,GACTjH,SAAU,GACV5B,KAAM,KAEZuI,UACH,CAAC6B,IAEJ,OACI,qCACI,cAAC,EAAD,CACIzF,QAASf,EAAMe,QACf0D,aAAczE,EAAMyE,aACpBL,cAAezD,EACfyE,UAAWA,EACX3B,OAAQA,EACRC,aAAc,WACV4C,GAAU,GACVC,GAAa,GACbF,EAAaH,EAAelG,EAAM5D,QAEtCyH,cAAe,SAACiD,IArDD,SAACA,GACxBA,EAAMjB,iBACN7F,EAAM3C,KAAN,eAAgBsD,IACXyE,GACDiB,EAAaH,EAAelG,EAAM5D,OAkD1B2K,CAAmBD,IAEvBzC,SAhGW,SAACyC,GACpB,IAAME,EAAuB,eAAQrG,GAErC,OAAQmG,EAAM9J,OAAOM,MACrB,IAAK,aACD0J,EAAY1J,KAAOwJ,EAAM9J,OAAOkB,MAChC,MACJ,IAAK,WACD8I,EAAYpG,GAAKkG,EAAM9J,OAAOkB,MAC9B,MACJ,IAAK,oBACD8I,EAAY9B,YAAc4B,EAAM9J,OAAOkB,MACvC,MACJ,IAAK,gBACD8I,EAAYrC,QAAUsC,SAASH,EAAM9J,OAAOkB,OAC5C,MACJ,IAAK,qBACD8I,EAAYjC,OAAS+B,EAAM9J,OAAO8H,QAAb,sBACXkC,EAAYjC,QADD,CACS+B,EAAM9J,OAAOkB,QACrC8I,EAAYjC,OAAOhH,QACjB,SAACnB,GAAD,OAAOA,IAAMkK,EAAM9J,OAAOkB,SAElC,MACJ,IAAK,sBACD8I,EAAY/B,QAAU6B,EAAM9J,OAAO8H,QAAb,sBACZkC,EAAY/B,SADA,CACS6B,EAAM9J,OAAOkB,QACtC8I,EAAY/B,QAAQlH,QAClB,SAACnB,GAAD,OAAOA,IAAMkK,EAAM9J,OAAOkB,SAKtCmI,EAAaW,MAkET,eAAC9D,EAAA,EAAD,CAAM0C,IAAKA,EAAX,UACI,cAAC1C,EAAA,EAAKgE,OAAN,CAAa,cAAa,gBAA1B,SACI,sBACInE,MAAO,CACHiD,QAAS,OACTmB,eAAgB,iBAHxB,oBAMQnH,EAAM1C,KANd,KAOI,eAAC+E,EAAA,EAAD,CAAUC,GAAIC,IAAd,UACI,cAACC,EAAA,EAAD,CACIN,QAAS,WACLoE,GAAU,IAEd,cAAY,oBACZ5D,QAAQ,UALZ,wBAUA,cAACL,EAAA,EAASM,OAAV,CACIC,OAAK,EACLF,QAAQ,UACR9B,GAAG,uBACH,cAAY,yBAGhB,eAACyB,EAAA,EAASQ,KAAV,WACI,cAACR,EAAA,EAASS,KAAV,CACIZ,QAASlC,EAAMoH,aACf,cAAY,uBAFhB,4BAMA,cAAC/E,EAAA,EAASS,KAAV,CACIC,MAAO,CAAEC,MAAO,WAChB,cAAa,kBACbd,QAASlC,EAAMnC,eAHnB,wCAWhB,cAACwJ,EAAA,EAAD,CAAWlH,UAAU,UAAU,cAAY,aAA3C,SACKqG,EAAgB7J,KACb,SAAC+D,EAAoBrE,GACjB,OACI,cAACiL,EAAA,EAAD,CACInH,UAAU,cADd,SAKQ,cAAC,EAAD,2BACQO,GADR,IAEIuF,YAAaA,EACb7E,aACIpB,EAAMoB,iBAPb/E,QAgBzB,cAAC6G,EAAA,EAAKqE,OAAN,CACI,cAAY,gBACZpH,UAAU,aAFd,4BAGcuG,cAOlCP,EAASL,YAAc,WAERK,Q,SChOA,SAASqB,EAAkBxH,GACtC,MAAgByH,aAAQ,iBAAO,CAC3BC,OAAQ,SACRC,KAAM,SAACpC,GACHvF,EAAM4H,aAAarC,EAAKnJ,UAE5B,CAAC4D,EAAM4H,eALHD,EAAR,oBAOA,OAAO,cAAC,EAAD,aACH/B,IAAK+B,GACD3H,ICFG,SAAS6H,EAAa7H,GACjC,IAAM8H,EAAkBrB,mBAAQ,WAC5B,OAAOzG,EAAM5C,UACR2K,MAAK,SAACC,EAAiBC,GACpB,OAAOD,EAAEzK,MAAMmE,UAAYuG,EAAE1K,MAAMmE,aAEtC/E,KACG,SACIqB,EACAN,EACAwK,GAGA,IADA,IAAIC,EAAQ,EACH9L,EAAI,EAAGA,EAAIqB,EAAOrB,IACnB2B,EAASV,OAAS4K,EAAM7L,GAAGiB,MAC3B6K,IAaR,IAVA,IAAMC,EAA4B,CAC9B9K,KACI6K,EAAQ,EAAR,UACSnK,EAASV,KADlB,YAC0B6K,EAAQ,GAC5BnK,EAASV,KACnBE,IAAKQ,EAASR,IAEdpB,KAAM4B,EAAS5B,KACfmB,MAAOS,EAAST,OAGZlB,EAAIqB,EAAQ,EAChBrB,EAAI6L,EAAM5L,QAAU0B,EAASV,OAAS8K,EAAY9K,KAClDjB,IAEI6L,EAAM7L,GAAGiB,OAASU,EAASV,OAC3B8K,EAAY9K,KAAZ,UAAsBU,EAASV,KAA/B,OAGR,OAAO8K,OAGpB,CAACpI,EAAM5C,YAEV,OACI,mCACK0K,EAAgBnL,KACb,SAAC0L,EAA6B3K,GAC1B,OACI,cAACqG,EAAA,EAAD,CACI5D,UAAU,OACV,iCAAyBzC,EAAQ,GAFrC,SAKI,cAAC8J,EAAD,yBACII,aAAc,SAACxL,GACX4D,EAAMsI,WAAWlM,EAAMiM,EAAcjM,OAEzC2E,QAASf,EAAMe,SACXsH,GALR,IAMIxK,eAAgB,WACZmC,EAAMnC,eAAewK,EAAcjM,OAEvCiB,KAAM2C,EAAMuI,UACZnH,aAAcpB,EAAMoB,aACpBgG,aAAc,WACVpH,EAAMoH,aAAaiB,EAAcjM,OAErCqI,aAAczE,EAAMyE,iBAhBnB4D,EAAcjM,W,8BCtDhC,SAASoM,EAAYxI,GAChC,IAAMyI,EAAgBC,iBAAO,MAC7B,OACI,qCACI,cAAC3E,EAAA,EAAD,UACI,cAACb,EAAA,EAAD,CACIyF,GAAG,QACHxI,UAAU,oBACV4C,MAAO,CAAE6F,KAAM,YAHnB,SAKI,cAACpG,EAAA,EAAD,CACI,cAAY,qBACZoD,IAAK6C,EACLvG,QAAS,WACLlC,EAAM6I,QACF7I,EAAM8I,cAAgB9I,EAAM+I,SACtB,KACA/I,EAAM+I,WAGpBnI,GAAG,sBAVP,kCAgBR,cAACmD,EAAA,EAAD,CAAK,cAAY,eAAjB,SACI,cAACiF,EAAA,EAAD,CACIhM,OAAQyL,EACRQ,UAAU,MACVC,KAAMlJ,EAAM8I,cAAgB9I,EAAM+I,SAClCI,OAAQ,WACJnJ,EAAM6I,QAAQ,OAElBO,WAAW,EACXC,YAAY,EARhB,SAUI,cAACC,EAAA,EAAD,CAAS1I,GAAG,gBAAgB,cAAY,UAAxC,SACI,cAAC2I,EAAA,EAAD,UACI,qBAAK,cAAa,gBAAlB,SACKvJ,EAAMuD,sBCzCxB,SAASiG,EAAaxJ,GACjC,OACI,uBACI4D,SAAU5D,EAAMyJ,aADpB,UAGI,4CACA,uBACI,cAAY,eACZ5M,KAAK,OACLS,KAAK,SACL+G,SAAUrE,EAAM0J,cAEpB,uBACA,4CACA,uBACI,cAAY,eACZ7M,KAAK,OACLS,KAAK,SACL+G,SAAUrE,EAAM0J,cAEpB,uBACA,0CACA,uBACI,cAAY,aACZ7M,KAAK,OACLS,KAAK,OACL+G,SAAUrE,EAAM0J,cAEpB,uBACA,uBACIC,UAAW3J,EAAM4J,UACjB,cAAY,gBACZ/M,KAAK,SACLqB,MAAM,cCdP,SAAS2L,EAAK7J,GACzB,OACI,qBAAK,6BAAqBA,EAAMtC,OAAhC,SACI,eAACoE,EAAD,CACIpE,MAAOsC,EAAMtC,MACb+E,UAAW,WACPzC,EAAMyC,aAEVxE,WAAY,WACR+B,EAAM/B,cANd,UASI,cAAC4J,EAAD,CACIzK,UAAW4C,EAAM5C,UACjB2D,QAASf,EAAMe,QACf0D,aAAczE,EAAMyE,aACpBrD,aAAcpB,EAAMoB,aACpBkH,WAAYtI,EAAMsI,WAClBC,UAAWvI,EAAMuI,UACjB1K,eAAgB,SAACJ,GACbuC,EAAMnC,eAAeJ,IAEzB2J,aAAc,SAAC3J,GAA0B,IAAD,gBACfuC,EAAMe,QAAQhD,QAC/B,SAAC2C,GACG,OAAOA,EAAO1C,WAAaP,MAHC,IACpC,2BAIG,CAAC,IAJOiD,EAIR,QACCV,EAAMoB,aAAaV,EAAOtE,OANM,kCAU5C,cAACoM,EAAD,CACIM,YAAa9I,EAAM8I,YACnBD,QAAS7I,EAAM6I,QACfE,SAAU/I,EAAM5D,KAHpB,SAKI,cAACoN,EAAD,CACII,UAAW5J,EAAM8J,kBACjBJ,YAAa1J,EAAM+J,oBACnBN,aAAc,SAAC3C,GACX9G,EAAMgK,qBAAqBlD,EAAO9G,EAAM5D,eAvCd4D,EAAM5D,M,cCiB7C6N,GA3Cc,SACzBjK,GAEA,OACI,qBAAKG,UAAU,8BAAf,SACI,qBACIA,UAAU,sBACV,cAAY,sBAFhB,SAII,eAAC+J,GAAA,EAAD,WACI,gCACI,6BACI,sDACwB,uBADxB,qCAMR,gCACKlK,EAAMyE,aAAa9H,KAAI,SAAC+H,GACrB,OACI,oBACIvE,WAGW,IAFPH,EAAMmK,kBAAkBC,QACpB1F,GAEE,MACA,QAEV,wCAAgCA,GARpC,SAWI,6BAAKA,KAFAA,gB,oBCO1B2F,GAlCG,SAACrK,GA2Bf,OACI,cAACwC,EAAA,EAAD,CAAQF,GAAG,IAAIiC,KAAK,IAAIrC,QA1BV,WAEd,IAAIoI,EACA,qGACJtK,EAAMxB,MAAMN,MAAMqM,SAAQ,SAACrL,GACvBA,EAAK9B,UAAUmN,SAAQ,SAACvM,GACCgC,EAAMe,QAAQI,WAAWpD,QAC1C,SAAC2C,GACG,OAAOA,EAAO1C,WAAaA,EAAS5B,QAG/BmO,SAAQ,SAAC7J,GAClB,IAAMqE,EAASrE,EAAOqE,OAAOyF,KAAK,KAC5BvF,EAAUvE,EAAOuE,QAAQuF,KAAK,KAEpCF,GAAG,UAAOpL,EAAKxB,MAAZ,YAAqBM,EAASV,KAA9B,YAAsCoD,EAAOE,GAA7C,YAAmDF,EAAOpD,KAA1D,YAAkEoD,EAAOwE,YAAzE,YAAwFxE,EAAOiE,QAA/F,YAA0GI,EAA1G,YAAoHE,EAApH,eAKf,IAAMwF,EAAU,IAAIC,KAAK,CAACJ,GAAM,CAAEzN,KAAM,4BAGxC8N,KAAUC,OAAOH,EAAS,iBAGkBtK,UAAU,gBAAtD,yBCZR,SAAS0K,KACL,IAAM3L,GAAO,IAAI4L,MAAOC,cAElBlL,EAAS,IAAI3C,MACb8N,EAAoB,CAAEtN,MAAO,EAAGtB,KAAMA,cAAQgB,UAAW,IAC/D4N,EAAQ5N,UAAUC,KAAK,CACnBjB,KAAMA,cACNkB,KAAM,OACNC,MAAO,IAAIuN,KAAJ,UAAY5L,EAAZ,WACP1B,IAAK,IAAIsN,KAAJ,UAAY5L,EAAZ,aAET8L,EAAQ5N,UAAUC,KAAK,CACnBjB,KAAMA,cACNkB,KAAM,SACNC,MAAO,IAAIuN,KAAJ,UAAY5L,EAAO,EAAnB,WACP1B,IAAK,IAAIsN,KAAJ,UAAY5L,EAAO,EAAnB,aAET,IAAM+L,EAAoB,CAAEvN,MAAO,EAAGtB,KAAMA,cAAQgB,UAAW,IAS/D,OARA6N,EAAQ7N,UAAUC,KAAK,CACnBjB,KAAMA,cACNkB,KAAM,OACNC,MAAO,IAAIuN,KAAJ,UAAY5L,EAAO,EAAnB,WACP1B,IAAK,IAAIsN,KAAJ,UAAY5L,EAAO,EAAnB,aAETW,EAAOxC,KAAK2N,GACZnL,EAAOxC,KAAK4N,GACLpL,EAGX,SAASqL,GAASjL,GAAoC,IAAD,gBAC3BA,GAD2B,IACjD,2BAAgC,CAC5B,GAD4B,QAChBX,MACR,OAAO,GAHkC,8BAMjD,OAAO,EAGJ,SAAS6L,GAAUC,GACtB,IAAI5M,EAAQJ,EAASyM,IAEjBQ,EAAyCR,GACzCS,OAAgD/M,EAE9CgN,EAASrP,EAAUkP,EAAcI,MAAMC,SAAUL,EAAcM,YAErE,IAAgB,IAAZH,EAAc,CAEd,IAAMI,EAAOP,EAAcI,MAAMC,SAASF,QACtBhN,IAAfoN,EAAKnN,OAAuBmN,EAAKnN,MAAMlC,OAAS,IACjD+O,EAAkB,WACd,OAAIM,EAAKnN,MACEmN,EAAKnN,MAEL,IAAItB,aAKFqB,IAAjBoN,EAAK5K,SAAyB4K,EAAK5K,QAAQzE,OAAS,GAChDqP,EAAK5K,UACLuK,EAAiBK,EAAK5K,SAIlCvC,EAAQJ,EAASiN,GAEjB,IAAMtK,EAAUC,EAAWsK,GAE3B,EAAkDlF,mBAC9C,IADJ,mBAAO+D,EAAP,KAA0ByB,EAA1B,KAIA,EAA8BxF,mBAAwB,MAAtD,mBAAOyF,EAAP,KAAgBC,EAAhB,KAEA,EAAgC1F,mBAAwB,MAAxD,mBAAO2F,EAAP,KAAiBC,EAAjB,KAEA,EAA4B5F,mBAAwB,MAApD,mBAAO6F,EAAP,KAAeC,EAAf,KAEA,EAAsC9F,mBAAwB,MAA9D,mBAAO0C,EAAP,KAAoBqD,EAApB,KAEA,EAAkD/F,oBAAS,GAA3D,mBAAO0D,EAAP,KAA0BsC,EAA1B,KAGMnM,EfxBK,WACX,MAAiC3B,qBAAWc,OAAeb,EAAUuB,GAArE,mBAAOD,EAAP,KAAewM,EAAf,KAcA,MAAO,CAACC,IARI,SAAC1M,GACTyM,EAAe,CAACxP,KAAM,MAAO+C,QAASA,KAO7B2M,QAZG,SAACvP,GACbqP,EAAe,CAACxP,KAAM,eAAgBG,OAAQA,KAW5BwP,MAJR,SAAChN,GACX6M,EAAe,CAACxP,KAAM,QAAS2C,OAAQA,KAGdtB,MAAO2B,GeSnB4M,GACX5D,EAAU,SAACzM,GACb+P,EAAe/P,GACfgQ,GAAqB,GACrBN,EAAW,MACXE,EAAY,MACZE,EAAU,MACVjM,EAASuM,MAAM,kBAEbzC,EAAsB,SAACjD,IChH1B,SAAiCA,EAAsCiF,EAAyBE,EAAuBH,EAA2CE,EAA6CE,EAAyC1N,EAAcsK,EAA4B7I,GACrS,OAAQ6G,EAAM9J,OAAOM,MACrB,IAAK,SACDwO,EAAWhF,EAAM9J,OAAOkB,OACxB,MAEJ,IAAK,SACD,IAAMd,EACEoB,EAAMN,MACFhC,EAAUsC,EAAMN,MAAO4K,IACzB1L,UAEJsP,EAAclL,EADJ,IAAIsJ,KAAKhE,EAAM9J,OAAOkB,OAGvB,OAAX+N,EAAkB,IAAInB,KAAKmB,GAAU,KACrC7O,EACA,UAEJ,GAAe,OAAX6O,EACAhM,EAASuM,MAAM,iBACY,IAAvBE,EAAYpQ,QACZ2D,EAASqM,IAAII,EAAY,QAE1B,CACHzM,EAASuM,MAAM,iBADZ,oBAEmBE,GAFnB,IAEH,2BAAmC,CAAC,IAAzB9M,EAAwB,QAC/BK,EAASqM,IAAI1M,IAHd,+BAMPoM,EAAYlF,EAAM9J,OAAOkB,OACzB,MAEJ,IAAK,OACD,IAAMd,EACEoB,EAAMN,MACFhC,EAAUsC,EAAMN,MAAO4K,IACzB1L,UACJuP,EAAU,IAAI7B,KAAKhE,EAAM9J,OAAOkB,OAChCwO,EAAclL,EACH,OAAbuK,EAAoB,IAAIjB,KAAKiB,GAAY,KACzCY,EACAvP,EACA,QAEJ,GAAe,OAAX6O,EACAhM,EAASuM,MAAM,iBACY,IAAvBE,EAAYpQ,QACZ2D,EAASqM,IAAII,EAAY,QAE1B,CACHzM,EAASuM,MAAM,iBADZ,oBAEmBE,GAFnB,IAEH,2BAAmC,CAAC,IAAzB9M,EAAwB,QAC/BK,EAASqM,IAAI1M,IAHd,+BAMPsM,EAAUpF,EAAM9J,OAAOkB,QD0DvB0O,CACI9F,EACAiF,EACAE,EACAH,EACAE,EACAE,EACA1N,EACAsK,EACA7I,IAIF+J,EAAuB,SACzBlD,EACAlG,ICnED,SAAkCkG,EAAmClG,EAAYiL,EAAwBE,EAAyBE,EAAuBY,EAAuBC,GACnLhG,EAAMjB,iBACU,OAAZgG,GAA+B,OAAXI,GAAgC,OAAbF,IACvCe,EACIlM,EACAxE,cACA,IAAI0O,KAAKiB,GACT,IAAIjB,KAAKmB,GACTJ,GAEJgB,KD2DAE,CACIjG,EACAlG,EACAiL,EACAE,EACAE,GACA,WACIpD,EAAQ,QAEZrK,EAAME,cAGRsO,EAAgB,SAClB7L,EACA8L,GAEA,IAAK,IAAI5Q,EAAI,EAAGA,EAAI8E,EAAW7E,OAAQD,IACnC,GAAI8E,EAAW9E,GAAGuE,KAAOqM,EACrB,OAAO5Q,EAGf,OAAQ,GAsCZ,OAlCA6Q,qBAAU,WACN,IADY,EACNzI,EAAe2G,EAAc3G,aAC7B0I,EAAajQ,QAFP,cAIcuH,GAJd,IAIZ,2BAAwC,CAAC,IAA9BC,EAA6B,SACoB,IAApDsI,EAAcjM,EAAQI,WAAYuD,IAClCyI,EAAW9P,KAAKqH,IANZ,8BAUZkH,EAAqBuB,KACtB,CAAC/B,EAAc3G,aAAc1D,EAAQI,aAIxC+L,qBAAU,WACN9B,EAAcI,MAAM4B,SAAShC,EAAcM,WAAYlN,EAAMN,OAC7DkN,EAAcI,MAAM6B,WAAWjC,EAAcM,WAAY3K,EAAQI,cAClE,CAAC3C,EAAMN,MAAO6C,EAAQI,aAGrB0K,GACAI,GACAF,IACCjC,IACAoB,GAASjL,EAAS/B,OAEnBkO,GAAqB,GAEnBP,GAAYI,GAAWF,IAAYb,GAASjL,EAAS/B,SACvD4L,GAEAsC,GAAqB,GAGrB,qCACI,oBAAIjM,UAAU,UAAd,6BACA,cAAC,GAAD,CAAWY,QAASA,EAASvC,MAAOA,IACpC,cAAC,GAAD,CACIiG,aAAc2G,EAAc3G,aAC5B0F,kBAAmBA,IAEvB,gCACK3L,EAAMN,MAAMvB,KAAI,SAACqD,GACd,OACI,cAAC,EAAD,CAEIyC,UAAW,WACPjE,EAAMM,WAAWkB,EAAM5D,OAE3B6B,WAAY,WACRO,EAAMG,YAAYqB,EAAM5D,OAE5ByB,eAAgB,SAACJ,GACbe,EAAMX,eAAemC,EAAM5D,KAAMqB,IAErCsD,QAASA,EAAQI,WACjBoH,UAAWxH,EAAQ1D,KACnBiL,WAAYvH,EAAQM,KACpBD,aAAcL,EAAQK,aACtB1D,MAAOsC,EAAMtC,MACbtB,KAAM4D,EAAM5D,KACZ4N,qBAAsBA,EACtBD,oBAAqBA,EACrB3M,UAAW4C,EAAM5C,UACjB0L,YAAaA,EACbD,QAASA,EACTiB,kBAAmBA,EACnBrF,aAAc0F,GAtBTnK,EAAM5D,SA2BvB,qBAAK+D,UAAU,SAAf,SACI,eAACkC,EAAA,EAAD,CAAUzB,GAAG,oBAAoB0B,GAAIC,IAArC,UACI,cAACC,EAAA,EAAD,CACIN,QAAS,WACL1D,EAAMnB,KAAKjB,cAAQoC,EAAMN,MAAM5B,OAAS,IAE5C,cAAY,kBACZoG,QAAQ,UALZ,wBAUA,cAACL,EAAA,EAASM,OAAV,CACIC,OAAK,EACLF,QAAQ,UACR9B,GAAG,uBACH,cAAY,8BAGhB,eAACyB,EAAA,EAASQ,KAAV,WACI,cAACR,EAAA,EAASS,KAAV,CACIC,MAAO,CAAEC,MAAO,WAChBd,QAAS,WACL1D,EAAMM,cAEV,cAAY,qBALhB,yBASA,cAACuD,EAAA,EAASS,KAAV,CACIC,MAAO,CAAEC,MAAO,WAChBd,QAAS,WACL1D,EAAMG,eAEV,cAAY,sBALhB,yCAchB,cAACoB,EAAD,CAAYE,SAAUA,EAAS/B,W,uBE1M5BoP,GAvD6B,SAACtN,GACzC,IAAQyE,EAAwDzE,EAAxDyE,aAAc8I,EAA0CvN,EAA1CuN,oBAAqBC,EAAqBxN,EAArBwN,iBAC3C,EAA4CpH,mBAAS,IAArD,mBAAOqH,EAAP,KAAuBC,EAAvB,KAKA,OACI,eAAC3L,EAAA,EAAD,CAAW5B,UAAU,sBAArB,UACI,oBAAIA,UAAU,SAAd,2CACCsE,EAAa9H,KAAI,SAAC+H,GAAD,OACd,eAACvB,EAAA,EAAD,CAEIhD,UAAU,iCAFd,UAII,eAAC4D,EAAA,EAAD,CAAK4J,IAAE,EAACC,GAAG,IAAX,UACK,IACAlJ,EAAa,OAElB,cAACX,EAAA,EAAD,CAAK4J,IAAE,EAACC,GAAG,IAAX,SACI,cAACpL,EAAA,EAAD,CACIN,QAAS,kBAAMqL,EAAoB7I,IACnC,cAAY,qBAFhB,wBARCA,MAiBb,cAACvB,EAAA,EAAD,CAAKhD,UAAU,iCAAf,SACI,eAAC0N,GAAA,EAAD,CAAY1N,UAAU,OAAO4C,MAAO,CAAE+K,MAAO,OAA7C,UACI,cAACC,GAAA,EAAD,CACI5J,YAAY,0BACZjG,MAAOuP,EACPpJ,SAAU,SAAC2J,GACPN,EAAkBM,EAAGhR,OAAOkB,QAEhC,aAAW,yBACX+P,MAAM,sBAEV,cAACzL,EAAA,EAAD,CACIE,QAAQ,oBACRuL,MAAM,SACNrN,GAAG,8BACHsB,QAxCH,WACbsL,EAAiBC,IAwCD,cAAY,qBALhB,iC,SCiBLS,GA1EuC,WAClD,MAA8B9H,mBAAS,CACnC+H,KAAK,EACLC,MAAO,CACH,CACIH,MAAO,iCACPI,eAAe,EACfrR,OAAQ,+BACRsR,QACI,wEAER,CACIL,MAAO,mCACPI,eAAe,EACfrR,OAAQ,mBACRsR,QACI,sOAER,CACIL,MAAO,kDACPI,eAAe,EACfrR,OAAQ,SACRsR,QACI,qIAER,CACIL,MAAO,oCACPI,eAAe,EACfrR,OAAQ,mBACRsR,QACI,yEA7BhB,mBAAOC,EAAP,KAAgBC,EAAhB,KAkCA,OACI,qCACI,qBAAKzL,MAAO,CAAE0L,YAAa,KAAMC,UAAW,SAA5C,SACI,cAAClM,EAAA,EAAD,CACIE,QAAQ,SACR,cAAY,+BACZR,QAAS,WACLsM,EAAW,2BAAKD,GAAN,IAAeJ,KAAMI,EAAQJ,QAJ/C,0BAUJ,cAAC,KAAD,CACIC,MAAOG,EAAQH,MACfD,IAAKI,EAAQJ,IACbQ,YAAU,EACVC,cAAY,EACZC,gBAAc,EACdC,OAAQ,CACJC,iBAAkB,CACdL,UAAW,QAEfM,WAAY,CACRC,gBAAiB,WAErBC,WAAY,CACRT,YAAa,KAGrBU,OAAQ,CACJC,KAAM,WACNC,KAAM,oB,8BCYXC,GAhFsC,WACjD,MAA8BlJ,mBAAS,CACnC+H,KAAK,EACLC,MAAO,CACH,CACIH,MAAO,mCACPI,eAAe,EACfrR,OAAQ,OACRsR,QACI,oGAER,CACIL,MAAO,yBACPjR,OAAQ,iBACRsR,QACI,iFAER,CACIL,MAAO,4CACPjR,OAAQ,kBACRsR,QACI,qFAER,CACIL,MAAO,oCACPjR,OAAQ,uBACRsR,QACI,sGAER,CACIL,MAAO,aACPjR,OAAQ,iBACRsR,QAAS,iCA/BrB,mBAAOC,EAAP,KAAgBC,EAAhB,KAoCA,OACI,qCACI,qBACI5N,GAAG,OACH,cAAa,8BACbmC,MAAO,CACHwM,WAAY,KACZd,YAAa,OACbnL,QAAS,SACTN,MAAO,QACPwM,QAAS,IACTC,OAAQ,WAEZvN,QAAS,kBAAMsM,EAAW,2BAAKD,GAAN,IAAeJ,KAAMI,EAAQJ,QAX1D,SAaI,2CAEJ,cAAC,KAAD,CACIC,MAAOG,EAAQH,MACfD,IAAKI,EAAQJ,IACbQ,YAAU,EACVC,cAAY,EACZC,gBAAc,EACdC,OAAQ,CACJC,iBAAkB,CACdL,UAAW,QAEfM,WAAY,CACRC,gBAAiB,WAErBC,WAAY,CACRT,YAAa,KAGrBU,OAAQ,CACJC,KAAM,WACNC,KAAM,oBC9BXK,GAzCO,WAClB,OACI,cAACC,GAAA,EAAD,CAAQhH,GAAG,QAAQiH,OAAO,KAA1B,SACI,eAAC7N,EAAA,EAAD,WACI,cAAC4N,GAAA,EAAOE,MAAR,CAAcvN,GAAIwN,IAAMC,GAAG,IAA3B,uBAGA,cAACJ,GAAA,EAAOhN,OAAR,CAAe,gBAAc,qBAC7B,cAACgN,GAAA,EAAOK,SAAR,CAAiBpP,GAAG,mBAAmB,cAAY,WAAnD,SACI,eAACqP,GAAA,EAAD,CAAK9P,UAAU,UAAf,UACI,cAAC8P,GAAA,EAAIH,KAAL,CAAUxN,GAAIwN,IAAMC,GAAG,IAAvB,kBAGA,cAACE,GAAA,EAAIH,KAAL,CAAUxN,GAAIgN,GAAd,sBAGA,cAACW,GAAA,EAAIH,KAAL,CAAUxN,GAAIwN,IAAM3P,UAAU,iBAAgB4P,GAAG,gBAAjD,0BAGA,eAACG,GAAA,EAAD,CAAajC,MAAM,YAAY9N,UAAU,sBAAsBS,GAAG,qBAAlE,UACI,cAACsP,GAAA,EAAYpN,KAAb,CAAkByB,KAAK,4BAAvB,4BAGA,cAAC2L,GAAA,EAAYpN,KAAb,CAAkByB,KAAK,4CAAvB,mBAGA,cAAC2L,GAAA,EAAYpN,KAAb,CAAkByB,KAAK,4BAAvB,kCAGA,cAAC2L,GAAA,EAAYC,QAAb,IACA,cAACD,GAAA,EAAYpN,KAAb,CAAkByB,KAAK,yCAAyCvH,OAAO,SAASoT,IAAI,sBAApF,uC,OC6FbC,OA3GR,SAAkBrQ,GACrB,IAAQwL,EAAUxL,EAAVwL,MAmBF8E,EAAa,SAACC,GAEhB,OADAC,aAAaC,QAAQ,cAAeC,KAAKC,UAAUnF,IAE/C,eAACtI,EAAA,EAAD,CACI/C,UAAU,qBACV4C,MAAO,CACH6N,WAAY,SACZzJ,eAAgB,eAChBhC,OAAQ,QALhB,UAQI,eAACjC,EAAA,EAAK2N,KAAN,CAAW9N,MAAO,CAAE6F,KAAM,YAA1B,UACI,eAAC1F,EAAA,EAAK4N,MAAN,oBAAmBP,EAAS3P,GAA5B,OACA,cAACsC,EAAA,EAAKoB,KAAN,CACIvB,MAAO,CAAEgO,WAAY,UAAWC,SAAU,WAD9C,SAGKT,EAAS1O,UAGlB,eAACQ,EAAA,EAAD,CAAUC,GAAIC,IAAd,UACI,cAACC,EAAA,EAAD,CACIF,GAAIwN,IACJC,GAAE,gBAAWQ,EAASnU,MACtBsG,QAAQ,UACR,cAAY,YAJhB,uBASA,cAACL,EAAA,EAASM,OAAV,CACIC,OAAK,EACLF,QAAQ,UACR9B,GAAG,uBACH,cAAY,gBAGhB,eAACyB,EAAA,EAASQ,KAAV,WACI,cAACR,EAAA,EAASS,KAAV,CACIZ,QAAS,YA3CpB,SAACqO,GAEV/E,EAAMyF,SAASV,EAASnU,KAAMmU,GA0CNW,CAAKX,IAET,cAAY,YAJhB,4BAQA,cAAClO,EAAA,EAASS,KAAV,CACIC,MAAO,CAAEC,MAAO,WAChBA,MAAM,QACNd,QAAS,YA5Dd,SAACqO,GAEZY,OAAOC,QAAQ,+CACf5F,EAAM6F,WAAWd,EAASnU,MA0DNkV,CAAWf,IAEf,cAAY,cANhB,mCAepB,OACI,cAACxO,EAAA,EAAD,UACI,eAACoB,EAAA,EAAD,CAAKwK,GAAI,EAAGvK,GAAI,EAAGjD,UAAU,MAA7B,UACKqL,EAAMC,SAAS9O,KAAI,SAAC4T,GAAD,OAChB,cAACxM,EAAA,EAAD,UAA0BuM,EAAWC,IAA3BA,EAASnU,SAEvB,cAAC2H,EAAA,EAAD,UACI,cAACb,EAAA,EAAD,CACIyF,GAAG,QACHxI,UAAU,gBACV4C,MAAO,CAAEoC,OAAQ,QAHrB,SAKI,eAAC3C,EAAA,EAAD,CACI5B,GAAG,kBACH,cAAY,WACZsB,QA5FR,WAEZsJ,EAAM+F,QAAQnV,gBAuFE,wBAKe,uBAAO,IAClB,sBAAMwE,GAAG,gBAAT,8BCnGb4Q,GAZuB,SAACxR,GACnC,IAAQwL,EAAUxL,EAAVwL,MACR,OACI,qBAAKrL,UAAU,OAAf,SACI,sBAAKA,UAAU,eAAf,UACI,oBAAIA,UAAU,cAAd,8BACA,cAAC,GAAD,CAAUqL,MAAOA,U,oBC6CjC,SAASiG,GACLjV,EACAC,GAEA,IAAMC,EAAOF,EAAKG,KAAI,SAACC,GACnB,OAAO,eAAIA,MAEf,OAAQH,EAAOI,MACf,IAAK,WACD,IAAM0U,EAAU9U,EACViV,EAAoB,CACtB9Q,GAAIlE,EAAKJ,OAAO,EAChBF,KAAMmV,EAAQnV,KACdoC,MAAO,IAAItB,MACXE,UAAW,IAAIF,MACf6D,QAAS,IAAI7D,OAGjB,OADAR,EAAKW,KAAKqU,GACHhV,EAEX,IAAK,cACD,IAAM2U,EAAa5U,EAInB,OAHeC,EAAKqB,QAAO,SAACG,GACxB,OAAOA,EAAM9B,OAASiV,EAAWjV,QAIzC,IAAK,YACD,IACMY,EAASd,EAAUQ,EADRD,EACuBL,MAClCuV,EAA0B,CAC5B/Q,GAAIlE,EAAKM,GAAQ4D,GACjBxE,KAAMA,cACNoC,MAAO9B,EAAKM,GAAQwB,MACpBpB,UAAWV,EAAKM,GAAQI,UACxB2D,QAASrE,EAAKM,GAAQ+D,SAG1B,OADArE,EAAKW,KAAKsU,GACHjV,EAEX,IAAK,YACD,IAAM0Q,EAAW3Q,EACXO,EAASd,EAAUQ,EAAM0Q,EAAShR,MAClCoC,EAAQ4O,EAASwE,SAEvB,OADAlV,EAAKM,GAAQwB,MAAQA,EACd9B,EAEX,IAAK,gBACD,IAAMmV,EAAepV,EACfO,EAASd,EAAUQ,EAAMmV,EAAazV,MACtCgB,EAAYyU,EAAaC,aAE/B,OADApV,EAAKM,GAAQI,UAAYA,EAClBV,EAEX,IAAK,cACD,IAAM2Q,EAAa5Q,EACbO,EAASd,EAAUQ,EAAM2Q,EAAWjR,MACpC2E,EAAUsM,EAAWlM,WAE3B,OADAzE,EAAKM,GAAQ+D,QAAUA,EAChBrE,EAEX,QACI,MAAM,IAAIyB,MAAM,wBAyET4T,OA5Df,SAAkBC,GACd,MAA0B1T,qBACtBmT,QACAlT,OACiBA,IAAjByT,EACM,WACE,OAAO,IAAI9U,OACX8U,GANZ,mBAAOxG,EAAP,KAAcyG,EAAd,KAkDA,MAAO,CACHxG,SAAUD,EACV4B,SA3Ca,SAAChR,EAAcwV,QACVrT,IAAbqT,GACDK,EAAS,CACLpV,KAAM,YACNT,KAAMA,EACNwV,SAAUA,KAuClBvE,WAlCe,SAACjR,EAAc+E,GAC9B8Q,EAAS,CACLpV,KAAM,cACNT,KAAMA,EACN+E,WAAYA,KA+BhBoQ,QA3BY,SAACnV,GACb6V,EAAS,CACLpV,KAAM,WACNT,KAAMA,EACNqP,SAAUvO,WAwBdmU,WApBe,SAACjV,GAChB6V,EAAS,CACLpV,KAAM,cACNT,KAAMA,KAkBV6U,SAda,SAAC7U,EAAcmU,GAC5B0B,EAAS,CACLpV,KAAM,YACNT,KAAMA,EACNmU,SAAUA,OCnJhB2B,GAA2B,SAAClS,GAC9B,IAAM5D,EAAO4D,EAAMmS,MAAMC,OAAOhW,KAGhC,OAAmB,IAFDF,EAAU8D,EAAMwL,MAAMC,SAAUrP,GAI1C,qCACI,cAAC,GAAD,IACA,sBACA,cAACiW,GAAA,EAAD,CAAaC,QAASC,KAAtB,SACI,cAACpH,GAAD,CAAW1G,aAAczE,EAAMyE,aAAc+G,MAAOxL,EAAMwL,MAAOE,WAAYtP,SAOrF,mCACI,qFA0DDoW,OAnDf,WACI,IAAMhH,EAAQuG,KACd,EAAwC3L,mBACpClJ,MAAc,UAAW,UAAW,YADxC,mBAAOuH,EAAP,KAAqBgO,EAArB,KAGMC,EAAiB,SAAChO,GACpB+N,EAAgB,GAAD,mBAAKhO,GAAL,CAAmBC,MAEhCiO,EAAoB,SAACjO,GACvB+N,EAAgBhO,EAAa1G,QAAO,SAAC6U,GAAD,OAAOA,IAAMlO,OAErD,OACI,eAAC,IAAD,WACI,8BACI,cAAC,GAAD,MAEJ,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CACImO,KAAK,eACLC,OAAQ,SAAC9S,GAAD,OACJ,cAAC,GAAD,2BAAUA,GAAV,IAAiByE,aAAcA,EAAc+G,MAAOA,QAG5D,cAAC,IAAD,CACIqH,KAAK,gBACLC,OAAQ,SAAC9S,GAAD,OACJ,cAAC,GAAD,2BACQA,GADR,IAEIyE,aAAcA,EACd+I,iBAAkBkF,EAClBnF,oBAAqBoF,QAIjC,cAAC,IAAD,CACIE,KAAK,IACLE,OAAK,EACLD,OAAQ,SAAC9S,GAAD,OACJ,cAAC,GAAD,2BACQA,GADR,IAEIwL,MAAOA,iBCtFxBwH,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCFpB3S,SAAS2N,MAAQ,gBAEjB7N,IAAS0S,OACL,cAAC,IAAMW,WAAP,UACI,cAAC,GAAD,MAEJnT,SAASC,eAAe,SAM5ByS,M","file":"static/js/main.52ee058a.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\nimport SemesterProps from \"../interfaces/Semester\";\nimport YearData from \"../interfaces/Year\";\nimport AbstractProps from \"../interfaces/Data\";\nimport { AddCourseAction } from \"./useCourses\";\n\ntype YearActionType = \n  \"ADD YEAR\"\n| \"DELETE YEAR\"\n| \"ADD SEMESTER\"\n| \"DELETE SEMESTER\"\n| \"ADD COURSE\";\n\ninterface AbstractAction {\n    type: YearActionType;\n    uuid: string;\n}\n\nexport interface AddSemesterAction extends AbstractAction {\n    type: \"ADD SEMESTER\";\n    semesterUuid: string;\n    name: string;\n    start: Date;\n    end: Date;\n}\n\nexport interface DeleteSemesterAction extends AbstractAction {\n    type: \"DELETE SEMESTER\";\n    semesterUuid: string;\n}\n\nexport interface DeleteYearAction extends AbstractAction {\n    type: \"DELETE YEAR\";\n}\n\nexport interface AddYearAction extends AbstractAction {\n    type: \"ADD YEAR\";\n    uuid: string;\n    index: number;\n}\n\nexport function getByUUID<T extends AbstractProps>(\n    state: Array<T>,\n    uuid: string\n): number {\n    for (let i = 0; i < state.length; i++) {\n        if (state[i].uuid === uuid) {\n            return i;\n        }\n    }\n    return -1;\n}\n\ntype YearAction<T extends YearActionType> = \nT extends \"ADD YEAR\" ? AddYearAction :\nT extends \"DELETE YEAR\" ? DeleteYearAction :\nT extends \"ADD SEMESTER\" ? AddSemesterAction : \nT extends \"DELETE SEMESTER\" ? DeleteSemesterAction :\nAddCourseAction\n\nfunction yearReducer<T extends YearActionType>(\n    prev: Array<YearData>,\n    action: YearAction<T>\n): Array<YearData> {\n    const next = prev.map((x: YearData) => {\n        return {...x};\n    });\n    switch (action.type) {\n    case \"ADD SEMESTER\": {\n        const semAction: AddSemesterAction = action as AddSemesterAction;\n        const targetIndex: number = getByUUID(next, semAction.uuid);\n        const target: YearData = next[targetIndex];\n        const newYear1 = new Array<SemesterProps>().concat(\n            target.semesters\n        );\n        newYear1.push({\n            name: semAction.name,\n            start: semAction.start,\n            end: semAction.end,\n            uuid: semAction.semesterUuid,\n        });\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear1,\n        };\n        return next;\n    }\n    case \"ADD YEAR\": {\n        const addYear = action as AddYearAction;\n        const newYear2: YearData = {\n            index: addYear.index,\n            uuid: addYear.uuid,\n            semesters: new Array<SemesterProps>(),\n        };\n        next.push(newYear2);\n        return next;\n    }\n    case \"DELETE SEMESTER\": {\n        const removeSemester = action as DeleteSemesterAction;\n        const targetIndex: number = getByUUID(next, removeSemester.uuid);\n        const targetYear: YearData = next[targetIndex];\n        const newYear = targetYear.semesters.filter(\n            (semester: SemesterProps) => {\n                return semester.uuid !== removeSemester.semesterUuid;\n            }\n        );\n        next[targetIndex] = {\n            index: next[targetIndex].index,\n            uuid: next[targetIndex].uuid,\n            semesters: newYear,\n        };\n        return next;\n    }\n    case \"DELETE YEAR\": {\n        const removeYear = action as DeleteYearAction;\n        const output = next.filter((value: YearData) => {\n            return value.uuid !== removeYear.uuid;\n        });\n        return output;\n    }\n    default:\n        throw Error(`${action.type} not implemented!`);\n    }\n}\nfunction removeYears(\n    years: Array<YearData>,\n\n    yearRemover: (uuid: string) => void,\n    yearUuid?: string\n) {\n    if (yearUuid !== undefined && yearUuid !== \"\") {\n        yearRemover(yearUuid);\n    } else if (yearUuid === undefined || yearUuid === \"\") {\n        for (const year of years) {\n            yearRemover(year.uuid);\n        }\n    }\n}\nfunction clearSemesters(\n    years: Array<YearData>,\n    pusher: (uuid: string, index: number) => void,\n    semesterRemover: (uuid: string, semesterUuid: string) => void,\n    yearRemover: (uuid: string) => void,\n    yearUuid?: string\n) {\n    if (yearUuid !== undefined && getByUUID(years, yearUuid) !== -1) {\n        for (const semester of years[getByUUID(years, yearUuid)].semesters) {\n            semesterRemover(yearUuid, semester.uuid);\n        }\n    } else if (yearUuid === undefined) {\n        const newYears: YearData[] = new Array<YearData>();\n        for (const year of years) {\n            newYears.push({\n                semesters: [],\n                index: year.index,\n                uuid: year.uuid,\n            });\n            yearRemover(year.uuid);\n        }\n        for (const year of newYears) {\n            pusher(year.uuid, year.index);\n        }\n    }\n}\n\nexport interface Years {\n    /**The list of years in the schedule */\n    value: Array<YearData>;\n    /**Adds a new year to a schedule. */\n    push: (uuid: string, index: number) => void;\n    /**Puts a semester into a year */\n    putSemester: (\n        /**The uuid of the year the semester is being added to. */\n        uuid: string,\n        /**The uuid of the new semester */\n        semesterUuid: string,\n        /**The start of the new semester */\n        start: Date,\n        /**The end of the new semester */\n        end: Date,\n        /**The name displayed to the user (likely the season the semester takes place in) */\n        name: string\n    ) => void;\n    /**Removes a semester from the year */\n    removeSemester: (\n        /**The uuid of the year the semester is being removed from */\n        uuid: string,\n        /**The uuid of the semester being removed */\n        semesterUuid: string\n    ) => void;\n\n    /**Clears all the semesters in a given year. If no year is supplied, deletes all semesters in value. */\n    clearYears: (uuid?: string) => void;\n    /**removes a given year. If no year is supplied, deletes all years. */\n    removeYears: (uuid?: string) => void;\n}\n\n/**Returns a Years interface to keep track of the years in a plan (see above)\n * @param init A funciton that returns an array of YearData; this returns the initial value in the output's value field. If empty, the default value will be an empty array.\n * @returns A Years object (see above for usage.)\n */\nfunction useYears(init?: () => Array<YearData>): Years {\n    const [years, updateYears] = useReducer(\n        yearReducer,\n        undefined,\n        init === undefined\n            ? () => {\n                return new Array<YearData>();\n            }\n            : init\n    );\n\n    const push = (uuid: string, index: number) => {\n        updateYears({\n            type: \"ADD YEAR\",\n            uuid: uuid,\n            index: index,\n        });\n    };\n    const putSemester = (\n        uuid: string,\n        semesterUuid: string,\n        start: Date,\n        end: Date,\n        name: string\n    ) => {\n        updateYears({\n            type: \"ADD SEMESTER\",\n            uuid: uuid,\n            name: name,\n            start: start,\n            end: end,\n            semesterUuid: semesterUuid,\n        });\n    };\n    const removeSemester = (uuid: string, semesterUuid: string) => {\n        updateYears({\n            type: \"DELETE SEMESTER\",\n            uuid: uuid,\n            semesterUuid: semesterUuid,\n        });\n    };\n    const removeYear = (uuid: string) => {\n        updateYears({\n            type: \"DELETE YEAR\",\n            uuid: uuid,\n        });\n    };\n    return {\n        value: years,\n        push,\n        putSemester,\n        removeSemester,\n        removeYears: (uuid?: string) => {\n            removeYears(years, removeYear, uuid);\n        },\n        clearYears: (uuid?: string) => {\n            clearSemesters(years, push, removeSemester, removeYear, uuid);\n        },\n    };\n}\n\nexport default useYears;\n","import { useReducer } from \"react\";\n\n/**An error or warning within a form that the user is filling out.*/\nexport interface Problem{\n    /**Whether or not this problem will stop the user from submitting the form.*/\n    error: boolean,\n    /**The message that is displayed to the user when this problem occurs. Also used internally to determine the cause of problems and find if they need to be removed.*/\n    message: string\n    /**The object where the error was generated (e.g. a form where the user has entered invalid data) */\n    source: string\n    /**The nature of the problem; can be used to check if a paricular error is present. */\n    problemType: string\n}\n\ninterface AbstractProblemAction{\n    type:  \"ADD\" | \"CLEAR\" | \"RESOLVE-TYPE\"\n}\n\ninterface ResolveProblemAction extends AbstractProblemAction{\n    type: \"RESOLVE-TYPE\",\n    target: string\n}\n\ninterface AddProblemAction extends AbstractProblemAction{\n    type: \"ADD\",\n    problem: Problem\n}\n\ninterface ClearProblemAction extends AbstractProblemAction{\n    type: \"CLEAR\",\n    source: string,\n}\n\ntype ProblemAction<T extends \"RESOLVE-TYPE\" | \"ADD\" | \"CLEAR\"> = \nT extends \"RESOLVE-TYPE\" ? ResolveProblemAction : \nT extends \"ADD\" ? AddProblemAction : \nT extends \"CLEAR\" ? ClearProblemAction : \nAbstractProblemAction; \n\nfunction problemReducer<T extends \"RESOLVE-TYPE\" | \"ADD\" | \"CLEAR\">(prev: Array<Problem>, action: ProblemAction<T>): Array<Problem>{\n    const newState: Array<Problem> = prev.map((value: Problem) => {\n        return {error: value.error, message: value.message, source: value.source, problemType: value.problemType};\n    });\n    switch(action.type){\n    case \"RESOLVE-TYPE\": {\n        const realAction = action as ResolveProblemAction;\n        for(let i = 0; i < newState.length; i++){\n            if(newState[i].problemType === realAction.target){\n                newState.splice(i,1);\n            }\n        }\n        return newState;\n    }case \"ADD\": {\n        const realAction = action as AddProblemAction;\n        newState.push(realAction.problem);\n        return newState;\n    }case \"CLEAR\": {\n        const realAction = action as ClearProblemAction;\n        const output: Array<Problem> = new Array<Problem>();\n        for(let i = 0;i < newState.length; i++){\n            if(newState[i].source !== realAction.source){\n                output.push(newState[i]);\n            }\n        }\n        return output;\n    }\n    }\n}\n\n/**Contains a state object and some convenience functions that interact with it through reduceProblem.*/\nexport interface ProblemsInterface{\n    /**Contains the current list of problems*/\n    value: Array<Problem>,\n    /**Resolves the problem with the desired type. */\n    resolve: (target: string) => void\n    /**Adds a problem to the current list of problems. */\n    add: (problem: Problem) => void,\n    /**Removes all problems with the source matching the input. */\n    clear: (source: string) => void\n}\n\nfunction initializer(): Array<Problem>{\n    return new Array<Problem>();\n}\n\n/**Returns a ProblemsInterface to track, create, and remove problems caused by the user interacting with the site in an unexpected way (see above for usage). */\nexport default function useProblems(): ProblemsInterface{\n    const [output, dispatchOutput] = useReducer(problemReducer,undefined,initializer);\n\n    const resolve = (target: string) => {\n        dispatchOutput({type: \"RESOLVE-TYPE\", target: target});\n    };\n\n    const add = (problem: Problem) => {\n        dispatchOutput({type: \"ADD\", problem: problem});\n    };\n\n    const clear = (source: string) => {\n        dispatchOutput({type: \"CLEAR\", source: source});\n    };\n\n    return {add, resolve, clear, value: output};\n}","import React from \"react\";\nimport { Problem } from \"../hooks/useProblems\";\nimport ReactDOM from \"react-dom\";\n\ninterface ErrorStackProps {\n    /**The problems being displayed (null indicates that there are no problems.) */\n    problems: Array<Problem> | null;\n}\n\n//This component is a stack that displays warnings and errors when the user enters inputs that could cause problems or are otherwise strange and likely to be an accident, e.g. a semester that is only a week long.\nexport default function ErrorStack(props: ErrorStackProps): JSX.Element {\n    if (props.problems !== null) {\n        const ctr = [\n            <div className=\"error-counter\" key={0}>\n                {props.problems.length}{\" \"}\n                {props.problems.length === 1 ? \"error\" : \"errors\"}\n            </div>,\n        ];\n\n        return ReactDOM.createPortal(\n            \n            <div className=\"error-modal\">\n                <div className=\"error-stack\">\n                    {ctr.concat(\n                        props.problems.map(\n                            (problem: Problem, index: number) => {\n                                return (\n                                    <span\n                                        className={\n                                            problem.error ? \"error\" : \"warning\"\n                                        }\n                                        key={index + 1}\n                                        data-testid={\n                                            problem.error ? \"error\" : \"warning\"\n                                        }\n                                    >\n                                        {problem.message}\n                                    </span>\n                                );\n                            }\n                        )\n                    )}\n                </div>\n            </div>,\n\n            document.getElementById(\"modal-view\") as Element || document.body\n        );\n    } else {\n        return <span data-testid=\"no-errors\" />;\n    }\n}\n","import { useReducer } from \"react\";\nimport CourseData from \"../interfaces/Course\";\nimport { getByUUID } from \"./useYears\";\n\nexport interface AbstractCourseAction {\n    type: \"ADD COURSE\" | \"REMOVE COURSE\" | \"UPDATE COURSE\";\n}\n\nexport interface AddCourseAction {\n    type: \"ADD COURSE\";\n    newCourse: CourseData;\n}\n\nexport interface RemoveCourseAction {\n    type: \"REMOVE COURSE\";\n    uuid: string;\n}\n\nexport interface UpdateCourseAction {\n    type: \"UPDATE COURSE\";\n    id: string;\n    payload: CourseData;\n}\n\ntype CourseAction<T extends \"ADD COURSE\" | \"REMOVE COURSE\" | \"UPDATE COURSE\"> = \nT extends \"ADD COURSE\" ? AddCourseAction :\nT extends \"REMOVE COURSE\" ? RemoveCourseAction : \nUpdateCourseAction;\n\n// easy access to the courses\n\nfunction courseReducer<T extends \"ADD COURSE\" | \"REMOVE COURSE\" | \"UPDATE COURSE\">(state: Array<CourseData>,action: CourseAction<T>): Array<CourseData> {\n    const newState = state.map((course: CourseData) => {\n        return {...course};\n    });\n    switch (action.type) {\n    case \"ADD COURSE\": {\n        const realAction = action as AddCourseAction;\n        newState.push({...realAction.newCourse});\n        return newState;\n    }\n    case \"REMOVE COURSE\": {\n        const realAction = action as RemoveCourseAction;\n        const target = getByUUID(newState, realAction.uuid);\n        if (target !== -1) {\n            newState.splice(target, 1);\n        }\n        return newState;\n    }\n    case \"UPDATE COURSE\": {\n        const realAction = action as UpdateCourseAction;\n        const target = getByUUID(newState, realAction.id);\n        newState.splice(target, 1);\n        newState.push(realAction.payload);\n        return newState;\n    }\n    default:\n        throw new Error(\"Unknown action type\");\n    }\n}\n\nconst courseInit = (courses?: Array<CourseData>): Array<CourseData> => {\n    return courses === undefined ? [] : courses;\n};\n\nexport interface Courses {\n    courseList: Array<CourseData>;\n    removeCourse: (courseID: string) => void;\n    push: (course: CourseData) => void;\n    move: (target: string, destinationUuid: string) => void;\n}\nfunction useCourses(initialCourses?: Array<CourseData>): Courses {\n    const [courses, updateCourses] = useReducer(\n        courseReducer,\n        initialCourses,\n        courseInit\n    );\n\n    const push = (course: CourseData) => {\n        //check if course is already in the list\n        const target = getByUUID(courses, course.uuid);\n        if (target !== -1) {\n            updateCourses({\n                type: \"UPDATE COURSE\",\n                id: course.uuid,\n                payload: course,\n            });\n        } else {\n            updateCourses({\n                type: \"ADD COURSE\",\n                newCourse: course,\n            });\n        }\n    };\n\n    const remove = (uuid: string) => {\n        updateCourses({\n            type: \"REMOVE COURSE\",\n            uuid: uuid,\n        });\n    };\n\n    const move = (uuid: string, destinationUuid: string) => {\n        const target = getByUUID(courses, uuid);\n        if(target != -1){\n            const old = {...courses[target]};\n            old.semester = destinationUuid;\n            updateCourses({\n                type: \"UPDATE COURSE\",\n                id: uuid,\n                payload: old\n            });\n        }  \n    };\n\n    return {\n        courseList: courses,\n        removeCourse: remove,\n        push,\n        move\n    };\n}\nexport default useCourses;\n","import SemesterProps from \"../../interfaces/Semester\";\nimport { Problem } from \"../../hooks/useProblems\";\n\nexport default function validate(start: Date | null, end: Date | null, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    if(start !== null && end !== null){\n        return validate_both_dates(start, end,existing);\n    }else if(start !== null){\n        return validate_single_date(start, existing, source);\n    }else if(end !== null){\n        return validate_single_date(end, existing, source);\n    }else{\n        return [];\n    }\n}\n\nfunction validate_both_dates(start: Date, end: Date, existing: Array<SemesterProps>): Array<Problem>{\n    const output = new Array<Problem>();\n    if(start.getTime() >= end.getTime()){\n        output.push({error: true, source: \"semester-form\", message: \"Semesters cannot start after they end!\",  problemType: \"semester-starts-after-ends\"});\n    }else if(end.getTime() - start.getTime() <= 1814400000){\n        output.push({error: false, source: \"semester-form\", message: \"Semester is less than three weeks long; is this a mistake?\", problemType: \"short-semester\"});\n    }\n\n    for(const semester of existing){\n        if(end.getTime() >= semester.start.getTime() && semester.end.getTime() >= start.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `Semester overlaps ${semester.name}`,  problemType: \"semester-overlap\"});\n        }\n    }\n    return output;\n\n}\n\nfunction validate_single_date(date: Date, existing: Array<SemesterProps>, source: string): Array<Problem>{\n    const output = new Array<Problem>();\n    for(const semester of existing){\n        if(date.getTime() > semester.start.getTime() && date.getTime() < semester.end.getTime()){\n            output.push({error: true, source: \"semester-form\", message: `${source} overlaps with ${semester.name}`, problemType: `semester-${source}-overlap`});\n        }\n    }\n    return output;\n}","import React from \"react\";\nimport {\n    Container,\n    Row,\n    Card,\n    Button,\n    ButtonGroup,\n    Dropdown,\n} from \"react-bootstrap\";\nimport Collapsible from \"react-collapsible\";\n\ninterface YearHeaderProps {\n    index: number;\n    clearYear: () => void;\n    removeYear: () => void;\n    children: JSX.Element | JSX.Element[];\n}\n\nexport default function YearHeader(props: YearHeaderProps): JSX.Element {\n    return (\n        <Container fluid>\n            <Collapsible\n                trigger={\n                    <div\n                        data-testid={`Year ${props.index} label`}\n                        className=\"year-collapsible-header\"\n                    >\n                        {`Year ${props.index}`}\n                        <div\n                            onClick={(e) => {\n                                e.stopPropagation();\n                            }}\n                        >\n                            <Dropdown as={ButtonGroup}>\n                                <Button\n                                    onClick={props.clearYear}\n                                    data-testid={`clear-year ${props.index}`}\n                                    variant=\"success\"\n                                >\n                                    Clear Year\n                                </Button>\n\n                                <Dropdown.Toggle\n                                    split\n                                    variant=\"success\"\n                                    id=\"dropdown-split-basic\"\n                                    data-testid=\"open-dropdown\"\n                                />\n\n                                <Dropdown.Menu>\n                                    <Dropdown.Item\n                                        style={{ color: \"#DC3E45\" }}\n                                        onClick={props.removeYear}\n                                        data-testid={`remove-year ${props.index}`}\n                                    >\n                                        Remove Year\n                                    </Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </div>\n                    </div>\n                }\n                transitionTime={200}\n            >\n                <Card className=\" p-2\">\n                    <Row\n                        md={4}\n                        style={{ overflow: \"auto\", padding: \"1.25rem 1.35rem\" }}\n                        data-testid=\"collapsible-content\"\n                    >\n                        {props.children}\n                    </Row>\n                </Card>\n            </Collapsible>\n        </Container>\n    );\n}\n","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\n\nimport ReactDOM from \"react-dom\";\nimport CourseData from \"../interfaces/Course\";\n\ninterface AddNewCourseData {\n    /**All of the existing courses. */\n    courses: CourseData[];\n    /** Degree requirements */\n    requirements: Array<string>;\n    /**Whether or not to display the form. */\n    isOpen: boolean;\n    /**The default values for fields that are left blank. */\n    defaultValues: CourseData;\n    /**Whether or not this component is currently modifying an existing course. */\n    isEditing: boolean;\n    /**A function that closes this form. */\n    onClickClose: () => void;\n    /**A function that is called when the user clicks the button to submit the form. */\n    onClickSubmit: (event: FormEvent<HTMLFormElement>) => void;\n    /**A function that is called when a field in the form is modified. */\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\n/**A form that asks the user for the data required to create a new course. The form will be displayed in a modal attached to the document body via a portal. */\nconst AddCourse = (props: AddNewCourseData): JSX.Element | null => {\n    if (!props.isOpen) return null;\n    return ReactDOM.createPortal(\n        <div>\n            <div className=\"modal-add-course\" data-testid=\"modal-add-course\">\n                <Button\n                    variant=\"danger\"\n                    onClick={props.onClickClose}\n                    data-testid=\"close-course-form\"\n                >\n                    Cancel\n                </Button>\n\n                <Form onSubmit={props.onClickSubmit} data-testid=\"course-form\">\n                    <Row className=\"mb-3\">\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseName\"\n                        >\n                            <Form.Label>Course Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Course Name\"\n                                data-testid=\"courseNameField\"\n                                name=\"courseName\"\n                                value={props.defaultValues.name}\n                                onChange={props.onChange}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                You can find this from{\" \"}\n                                <a href=\"https://my.udel.edu/task/all/courses\">\n                                    this\n                                </a>{\" \"}\n                                course search.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseID\"\n                        >\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                as=\"select\"\n                                name=\"courseID\"\n                                aria-label=\"dropdown with multiple course ids to choose from\"\n                                onChange={props.onChange}\n                                defaultValue={props.defaultValues.id}\n                            >\n                                <option>\n                                    {props.defaultValues.id.length > 0\n                                        ? props.defaultValues.id\n                                        : \"Choose a course ID\"}\n                                </option>\n                                {props.requirements.map((requirement) => {\n                                    return (\n                                        <option\n                                            key={requirement}\n                                            value={requirement}\n                                        >\n                                            {requirement}\n                                        </option>\n                                    );\n                                })}\n                            </Form.Control>\n                            <Form.Text className=\"text-muted\">\n                                This is used to check requirements. If you\n                                don&apos;t see a course add it&apos;s course ID\n                                in the requirements page instead.\n                            </Form.Text>\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group\n                            className=\"mb-3\"\n                            as={Col}\n                            controlId=\"courseCredits\"\n                        >\n                            <Form.Label>Number of credits</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                name=\"courseCredits\"\n                                placeholder=\"eg. 3\"\n                                value={props.defaultValues.credits}\n                                onChange={props.onChange}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Corequisites</Form.Label>\n                            {props.courses.length > 0 ? \n                                props.courses\n                                    .filter(\n                                        (course) =>\n                                            course.id != props.defaultValues.id\n                                    )\n                                    .map((course: CourseData) => \n                                        <Form.Check\n                                            data-testid={`co-${course.name}`}\n                                            key={course.uuid}\n                                            type=\"checkbox\"\n                                            label={course.name}\n                                            name=\"courseCorequisites\"\n                                            value={course.id}\n                                            checked={props.defaultValues.coreqs.includes(\n                                                course.id\n                                            )}\n                                            onChange={props.onChange}\n                                        />\n                                    )\n                                : \n                                <div> No courses to choose from. </div>\n                            }\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" as={Col}>\n                            <Form.Label>Select Prerequisites</Form.Label>\n                            {props.courses.length > 0 ? \n                                props.courses\n                                    .filter(\n                                        (course) =>\n                                            course.id != props.defaultValues.id\n                                    )\n                                    .map((course: CourseData) => \n                                        <Form.Check\n                                            key={course.uuid}\n                                            data-testid={`pre-${course.name}`}\n                                            type=\"checkbox\"\n                                            label={course.name}\n                                            name=\"coursePrerequisites\"\n                                            value={course.id}\n                                            checked={props.defaultValues.prereqs.includes(\n                                                course.id\n                                            )}\n                                            onChange={props.onChange}\n                                        />\n                                    )\n                                : \n                                <div> No courses to choose from. </div>\n                            }\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"courseDescription\">\n                        <Form.Label>Course Description (Optional) </Form.Label>\n                        <Form.Control\n                            name=\"courseDescription\"\n                            as=\"textarea\"\n                            placeholder=\"enter the course description here\"\n                            value={props.defaultValues.description}\n                            onChange={props.onChange}\n                            style={{ height: \"100px\" }}\n                        />\n                    </Form.Group>\n\n                    <Button\n                        variant=\"success\"\n                        type=\"submit\"\n                        data-testid=\"submit-course-button\"\n                    >\n                        {props.isEditing ? \"Edit Course\" : \"Add Course\"}\n                    </Button>\n                </Form>\n            </div>\n        </div>,\n        document.getElementById(\"modal-view\") as Element || document.body\n    );\n};\n\nexport default AddCourse;\n","import React from \"react\";\nimport CourseData from \"../interfaces/Course\";\nimport { useDrag } from \"react-dnd\";\nimport { Dropdown } from \"react-bootstrap\";\n\nexport interface CourseProps extends CourseData {\n    /**A function that deletes this course from the global map containing all courses. */\n    removeCourse: (uuid: string) => void;\n    /**A function that is called when the user clicks the edit button to edit this course. */\n    onClickEdit: (uuid: string) => void;\n}\n\n/**A component that represents a course. */\nconst Course = (props: CourseProps): JSX.Element => {\n    const [, drag] = useDrag(\n        () => ({\n            type: \"COURSE\",\n            item: {\n                uuid: props.uuid,\n            },\n        }),\n        [props.uuid]\n    );\n    interface ToggleProps {\n        children?: React.ReactNode;\n        onClick?: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => null;\n    }\n    const CustomToggle = React.forwardRef(\n        (props: ToggleProps, ref: React.Ref<HTMLAnchorElement>) => \n            <a\n                className=\"course-kebab-menu\"\n                data-testid=\"course-dropdown-toggle\"\n                href=\"\"\n                ref={ref}\n                onClick={(e) => {\n                    e.preventDefault();\n                    if (props.onClick) props.onClick(e);\n                }}\n            >\n                {props.children}\n            </a>\n        \n    );\n\n    CustomToggle.displayName = \"CustomToggle\";\n\n    return (\n        <div\n            ref={drag}\n            draggable={true}\n            data-testid={`Course ${props.id}: ${props.name}`}\n            className=\"course\"\n        >\n            <div style={{ display: \"inline-block\" }}>\n                {`${props.credits} ${props.name}`}\n            </div>\n            <Dropdown style={{ display: \"inline-block\" }}>\n                <Dropdown.Toggle as={CustomToggle}>\n                    <i\n                        className=\"fa fa-ellipsis-v\"\n                        data-testid=\"course-dropdown\"\n                    ></i>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu>\n                    <Dropdown.Item\n                        className=\"trigger\"\n                        data-testid=\"edit-course-button\"\n                        onClick={() => {\n                            props.onClickEdit(props.uuid);\n                        }}\n                    >\n                        Edit\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                        style={{ color: \"#DC3E45\" }}\n                        className=\"trigger\"\n                        data-testid={`remove-course-${props.id}`}\n                        onClick={() => {\n                            props.removeCourse(props.uuid);\n                        }}\n                    >\n                        Remove\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    );\n};\n\nexport default Course;\n","import React, { FormEvent, useState, useMemo } from \"react\";\nimport CourseData from \"../interfaces/Course\";\nimport {\n    ListGroup,\n    ListGroupItem,\n    Card,\n    Dropdown,\n    ButtonGroup,\n    Button,\n} from \"react-bootstrap\";\nimport SemesterData from \"../interfaces/Semester\";\nimport AddCourse from \"./AddCourse\";\nimport Course from \"./Course\";\nimport { v4 as uuid } from \"uuid\";\nimport { getByUUID } from \"../hooks/useYears\";\n\nexport interface SemesterProps extends SemesterData {\n    /**The uuid's of all exiting courses */\n    courses: Array<CourseData>;\n    /**The course ids of degree requirements eg. CISC220 etc.  */\n    requirements: Array<string>;\n    /**A function that will delete this semester.*/\n    removeSemester: () => void;\n    /**A function that removes a course from the global list. */\n    removeCourse: (uuid: string) => void;\n    /**A function that pushes courses into the global list. */\n    push: (course: CourseData) => void;\n    /**A function that clears all courses from this semester. */\n    clearCourses: () => void;\n}\n\nfunction getEmptyCourse(semester: string): CourseData {\n    return {\n        id: \"\",\n        name: \"\",\n        description: \"\",\n        credits: 0,\n        semester: semester,\n        coreqs: [],\n        prereqs: [],\n        uuid: uuid(),\n    };\n}\n\n/**Represents a single semester of courses within an academic year. */\nconst Semester = React.forwardRef(\n    (\n        props: SemesterProps,\n        ref: React.ForwardedRef<HTMLDivElement>\n    ): JSX.Element => {\n        const [newCourse, setNewCourse] = useState<CourseData>(() => {\n            return getEmptyCourse(props.uuid);\n        });\n        const [isOpen, setIsOpen] = useState(false);\n        const [isEditing, setIsEditing] = useState(false);\n\n        const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            const courseToAdd: CourseData = { ...newCourse };\n\n            switch (event.target.name) {\n            case \"courseName\":\n                courseToAdd.name = event.target.value;\n                break;\n            case \"courseID\":\n                courseToAdd.id = event.target.value;\n                break;\n            case \"courseDescription\":\n                courseToAdd.description = event.target.value;\n                break;\n            case \"courseCredits\":\n                courseToAdd.credits = parseInt(event.target.value);\n                break;\n            case \"courseCorequisites\":\n                courseToAdd.coreqs = event.target.checked\n                    ? [...courseToAdd.coreqs, event.target.value]\n                    : courseToAdd.coreqs.filter(\n                        (x) => x !== event.target.value\n                    );\n                break;\n            case \"coursePrerequisites\":\n                courseToAdd.prereqs = event.target.checked\n                    ? [...courseToAdd.prereqs, event.target.value]\n                    : courseToAdd.prereqs.filter(\n                        (x) => x !== event.target.value\n                    );\n                break;\n            }\n\n            setNewCourse(courseToAdd);\n        };\n\n        const onClickEdit = (uuid: string) => {\n            setNewCourse(props.courses[getByUUID(props.courses, uuid)]);\n            setIsOpen(true);\n            setIsEditing(true);\n        };\n        const handleCourseSubmit = (event: FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n            props.push({ ...newCourse });\n            if (!isEditing) {\n                setNewCourse(getEmptyCourse(props.uuid));\n            }\n        };\n        const semesterCourses = useMemo(() => {\n            return props.courses.filter((course: CourseData) => {\n                return course.semester === props.uuid;\n            });\n        }, [props.courses]);\n\n        const totalCredits = useMemo(() => {\n            return semesterCourses.reduce(\n                (previousValue: CourseData, currentValue: CourseData) => {\n                    return {\n                        id: \"\",\n                        description: \"\",\n                        name: \"\",\n                        credits: previousValue.credits + currentValue.credits,\n                        semester: \"\",\n                        coreqs: [],\n                        prereqs: [],\n                        uuid: \"\",\n                    };\n                },\n                {\n                    id: \"\",\n                    description: \"\",\n                    name: \"\",\n                    credits: 0,\n                    coreqs: [],\n                    prereqs: [],\n                    semester: \"\",\n                    uuid: \"\",\n                }\n            ).credits;\n        }, [semesterCourses]);\n\n        return (\n            <>\n                <AddCourse\n                    courses={props.courses}\n                    requirements={props.requirements}\n                    defaultValues={newCourse}\n                    isEditing={isEditing}\n                    isOpen={isOpen}\n                    onClickClose={() => {\n                        setIsOpen(false);\n                        setIsEditing(false);\n                        setNewCourse(getEmptyCourse(props.uuid));\n                    }}\n                    onClickSubmit={(event: FormEvent<HTMLFormElement>) => {\n                        handleCourseSubmit(event);\n                    }}\n                    onChange={handleOnChange}\n                ></AddCourse>\n                <Card ref={ref}>\n                    <Card.Header data-testid={\"semester-name\"}>\n                        <div\n                            style={{\n                                display: \"flex\",\n                                justifyContent: \"space-between\",\n                            }}\n                        >\n                            {`${props.name} `}\n                            <Dropdown as={ButtonGroup}>\n                                <Button\n                                    onClick={() => {\n                                        setIsOpen(true);\n                                    }}\n                                    data-testid=\"add-course-button\"\n                                    variant=\"success\"\n                                >\n                                    Add Course\n                                </Button>\n\n                                <Dropdown.Toggle\n                                    split\n                                    variant=\"success\"\n                                    id=\"dropdown-split-basic\"\n                                    data-testid=\"clear-courses-toggle\"\n                                />\n\n                                <Dropdown.Menu>\n                                    <Dropdown.Item\n                                        onClick={props.clearCourses}\n                                        data-testid=\"clear-courses-button\"\n                                    >\n                                        Clear Semester\n                                    </Dropdown.Item>\n                                    <Dropdown.Item\n                                        style={{ color: \"#DC3E45\" }}\n                                        data-testid={\"remove-semester\"}\n                                        onClick={props.removeSemester}\n                                    >\n                                        Remove Semester\n                                    </Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </div>\n                    </Card.Header>\n                    <ListGroup className=\"courses\" data-testid=\"drop-point\">\n                        {semesterCourses.map(\n                            (course: CourseData, i: number) => {\n                                return (\n                                    <ListGroupItem\n                                        className=\"course-item\"\n                                        key={i}\n                                    >\n                                        {\n                                            <Course\n                                                {...course}\n                                                onClickEdit={onClickEdit}\n                                                removeCourse={\n                                                    props.removeCourse\n                                                }\n                                            />\n                                        }\n                                    </ListGroupItem>\n                                );\n                            }\n                        )}\n                    </ListGroup>\n                    <Card.Footer\n                        data-testid=\"credits-count\"\n                        className=\"text-muted\"\n                    >{`Credits: ${totalCredits}`}</Card.Footer>\n                </Card>\n            </>\n        );\n    }\n);\n\nSemester.displayName = \"Semester\";\n\nexport default Semester;\n","import React from \"react\";\nimport Semester, {SemesterProps} from \"./Semester\";\nimport {useDrop} from \"react-dnd\";\nimport AbstractData from \"../interfaces/Data\";\n\nexport interface SemesterDropPointProps extends SemesterProps{\n    acceptCourse: (uuid: string) => void\n}\n\nexport default function SemesterDropPoint(props: SemesterDropPointProps): JSX.Element{\n    const [,drop] = useDrop(() => ({\n        accept: \"COURSE\",\n        drop: (item: AbstractData) => {\n            props.acceptCourse(item.uuid);\n        } \n    }), [props.acceptCourse]);\n\n    return <Semester\n        ref={drop}\n        {...props}\n    ></Semester>;\n}","import React, { useMemo } from \"react\";\nimport SemesterData from \"../../interfaces/Semester\";\nimport Col from \"react-bootstrap/Col\";\nimport SemesterDropPoint from \"../SemesterDropPoint\";\nimport CourseData from \"../../interfaces/Course\";\n\nexport interface SemesterListProps {\n    removeSemester: (uuid: string) => void;\n    clearCourses: (semesterUuid: string) => void;\n    courses: Array<CourseData>;\n    moveCourse: (uuid: string, destinationUuid: string) => void;\n    addCourse: (course: CourseData) => void;\n    removeCourse: (uuid: string) => void;\n    semesters: Array<SemesterData>;\n    requirements: Array<string>;\n}\n\nexport default function SemesterList(props: SemesterListProps): JSX.Element {\n    const sortedSemesters = useMemo(() => {\n        return props.semesters\n            .sort((a: SemesterData, b: SemesterData) => {\n                return a.start.getTime() - b.start.getTime();\n            })\n            .map(\n                (\n                    semester: SemesterData,\n                    index: number,\n                    array: Array<SemesterData>\n                ) => {\n                    let count = 0;\n                    for (let i = 0; i < index; i++) {\n                        if (semester.name === array[i].name) {\n                            count++;\n                        }\n                    }\n                    const newSemester: SemesterData = {\n                        name:\n                            count > 0\n                                ? `${semester.name} ${count + 1}`\n                                : semester.name,\n                        end: semester.end,\n\n                        uuid: semester.uuid,\n                        start: semester.start,\n                    };\n                    for (\n                        let i = index + 1;\n                        i < array.length && semester.name === newSemester.name;\n                        i++\n                    ) {\n                        if (array[i].name === semester.name) {\n                            newSemester.name = `${semester.name} 1`;\n                        }\n                    }\n                    return newSemester;\n                }\n            );\n    }, [props.semesters]);\n\n    return (\n        <>\n            {sortedSemesters.map(\n                (semesterProps: SemesterData, index: number) => {\n                    return (\n                        <Col\n                            className=\"mb-3\"\n                            data-testid={`semester ${index + 1}`}\n                            key={semesterProps.uuid}\n                        >\n                            <SemesterDropPoint\n                                acceptCourse={(uuid: string) => {\n                                    props.moveCourse(uuid, semesterProps.uuid);\n                                }}\n                                courses={props.courses}\n                                {...semesterProps}\n                                removeSemester={() => {\n                                    props.removeSemester(semesterProps.uuid);\n                                }}\n                                push={props.addCourse}\n                                removeCourse={props.removeCourse}\n                                clearCourses={() => {\n                                    props.clearCourses(semesterProps.uuid);\n                                }}\n                                requirements={props.requirements}\n                            />\n                        </Col>\n                    );\n                }\n            )}\n        </>\n    );\n}\n","import React, { useRef } from \"react\";\nimport { Col, Card, Button } from \"react-bootstrap\";\nimport Popover from \"react-bootstrap/Popover\";\nimport PopoverContent from \"react-bootstrap/PopoverContent\";\nimport Overlay from \"react-bootstrap/Overlay\";\n\ninterface FormTriggerProps {\n    currentForm: string | null;\n    setForm: (newForm: string | null) => void;\n    YearUuid: string;\n    children: JSX.Element;\n}\n\nexport default function FormTrigger(props: FormTriggerProps): JSX.Element {\n    const overlayButton = useRef(null);\n    return (\n        <>\n            <Col>\n                <Card\n                    bg=\"light\"\n                    className=\"add-semester-card\"\n                    style={{ flex: \"0 0 auto\" }}\n                >\n                    <Button\n                        data-testid=\"open-semester-form\"\n                        ref={overlayButton}\n                        onClick={() => {\n                            props.setForm(\n                                props.currentForm === props.YearUuid\n                                    ? null\n                                    : props.YearUuid\n                            );\n                        }}\n                        id=\"add-semester-button\"\n                    >\n                        Add a Semester +\n                    </Button>\n                </Card>\n            </Col>\n            <Col data-testid=\"form-trigger\">\n                <Overlay\n                    target={overlayButton}\n                    placement=\"top\"\n                    show={props.currentForm === props.YearUuid}\n                    onHide={() => {\n                        props.setForm(null);\n                    }}\n                    rootClose={true}\n                    transition={false}\n                >\n                    <Popover id=\"popover-basic\" data-testid=\"popover\">\n                        <PopoverContent>\n                            <div data-testid={\"semester-form\"}>\n                                {props.children}\n                            </div>\n                        </PopoverContent>\n                    </Popover>\n                </Overlay>\n            </Col>\n        </>\n    );\n}\n","import React, { ChangeEvent, FormEvent } from \"react\";\n\ninterface SemesterFormProps{\n    /**Whether or not this form can be submitted. */\n    canSubmit: boolean,\n    /**An event handler executed when the form is submitted. */\n    handleSubmit: (e: FormEvent<HTMLFormElement>) => void,\n    /**An event handler executed when an input field in the form is modified. */\n    handleInput: (e:ChangeEvent<HTMLInputElement>) => void\n}\n\n/**A form that takes in all the data required to add a semester to a pre-existing Year component. */\nexport default function SemesterForm(props: SemesterFormProps): JSX.Element{\n    return (\n        <form\n            onSubmit={props.handleSubmit}\n        >\n            <label>season:</label>\n            <input\n                data-testid=\"season-input\"\n                type=\"text\"\n                name=\"season\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>starts:</label>\n            <input\n                data-testid=\"starts-input\"\n                type=\"date\"\n                name=\"starts\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <label>ends:</label>\n            <input\n                data-testid=\"ends-input\"\n                type=\"date\"\n                name=\"ends\"\n                onChange={props.handleInput}\n            />\n            <br />\n            <input\n                disabled={!props.canSubmit}\n                data-testid=\"submit-button\"\n                type=\"submit\"\n                value=\"submit\"\n            />\n        </form>\n    );\n}","import React from \"react\";\nimport YearHeader from \"./YearHeader\";\nimport SemesterList from \"./SemesterList\";\nimport FormTrigger from \"./FormTrigger\";\nimport SemesterForm from \"./SemesterForm\";\nimport CourseData from \"../../interfaces/Course\";\nimport { ChangeEvent, FormEvent } from \"react\";\nimport SemesterData from \"../../interfaces/Semester\";\n\nexport interface YearProps {\n    clearYear: () => void;\n    removeYear: () => void;\n    removeSemester: (uuid: string) => void;\n    courses: Array<CourseData>;\n    addCourse: (course: CourseData) => void;\n    removeCourse: (uuid: string) => void;\n    moveCourse: (uuid: string, destinationUuid: string) => void;\n    index: number;\n    uuid: string;\n    handleSemesterSubmit: (\n        event: FormEvent<HTMLFormElement>,\n        uuid: string\n    ) => void;\n    handleSemesterInput: (event: ChangeEvent<HTMLInputElement>) => void;\n    semesters: Array<SemesterData>;\n    currentForm: string | null;\n    setForm: (newForm: string | null) => void;\n    submissionAllowed: boolean;\n    requirements: Array<string>;\n}\n\nexport default function Year(props: YearProps): JSX.Element {\n    return (\n        <div data-testid={`Year ${props.index}`} key={props.uuid}>\n            <YearHeader\n                index={props.index}\n                clearYear={() => {\n                    props.clearYear();\n                }}\n                removeYear={() => {\n                    props.removeYear();\n                }}\n            >\n                <SemesterList\n                    semesters={props.semesters}\n                    courses={props.courses}\n                    requirements={props.requirements}\n                    removeCourse={props.removeCourse}\n                    moveCourse={props.moveCourse}\n                    addCourse={props.addCourse}\n                    removeSemester={(semesterUuid: string) => {\n                        props.removeSemester(semesterUuid);\n                    }}\n                    clearCourses={(semesterUuid: string) => {\n                        for (const course of props.courses.filter(\n                            (course: CourseData) => {\n                                return course.semester === semesterUuid;\n                            }\n                        )) {\n                            props.removeCourse(course.uuid);\n                        }\n                    }}\n                />\n                <FormTrigger\n                    currentForm={props.currentForm}\n                    setForm={props.setForm}\n                    YearUuid={props.uuid}\n                >\n                    <SemesterForm\n                        canSubmit={props.submissionAllowed}\n                        handleInput={props.handleSemesterInput}\n                        handleSubmit={(event: FormEvent<HTMLFormElement>) => {\n                            props.handleSemesterSubmit(event, props.uuid);\n                        }}\n                    />\n                </FormTrigger>\n            </YearHeader>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\n\ninterface MetRequirementsTableProps {\n    requirements: Array<string>;\n    unmetRequirements: Array<string>;\n}\nconst MetRequirementsTable = (\n    props: MetRequirementsTableProps\n): JSX.Element => {\n    return (\n        <div className=\"degree-requirements-wrapper\">\n            <div\n                className=\"degree-requirements\"\n                data-testid=\"degree-requirements\"\n            >\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>\n                                Degree Requirements <br /> (Green = met, Red =\n                                unmet)\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {props.requirements.map((requirement) => {\n                            return (\n                                <tr\n                                    className={\n                                        props.unmetRequirements.indexOf(\n                                            requirement\n                                        ) === -1\n                                            ? \"met\"\n                                            : \"unmet\"\n                                    }\n                                    data-testid={`requirement-row-${requirement}`}\n                                    key={requirement}\n                                >\n                                    <td>{requirement}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </div>\n        </div>\n    );\n};\n\nexport default MetRequirementsTable;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Years } from \"../hooks/useYears\";\nimport { Courses } from \"../hooks/useCourses\";\nimport FileSaver from \"file-saver\";\n\ninterface ExportCSVProps {\n    years: Years;\n    courses: Courses;\n}\nconst ExportCSV = (props: ExportCSVProps): JSX.Element => {\n    //helper function to handle exporting the schedule as a CSV file\n    const exportCSV = () => {\n        //initialize headers of the CSV\n        let csv =\n            \"year,semester,course-id,course-name,course-description,course-credits,corequisites,prerequisites\\n\";\n        props.years.value.forEach((year) => {\n            year.semesters.forEach((semester) => {\n                const coursesToAdd = props.courses.courseList.filter(\n                    (course) => {\n                        return course.semester === semester.uuid;\n                    }\n                );\n                coursesToAdd.forEach((course) => {\n                    const coreqs = course.coreqs.join(\"|\");\n                    const prereqs = course.prereqs.join(\"|\");\n\n                    csv += `${year.index},${semester.name},${course.id},${course.name},${course.description},${course.credits},${coreqs},${prereqs}\\n`;\n                });\n            });\n        });\n        // Create a blob of the CSV\n        const csvFile = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n\n        // Download the file\n        FileSaver.saveAs(csvFile, \"schedule.csv\");\n    };\n    return (\n        <Button as=\"a\" href=\"#\" onClick={exportCSV} className=\"export-button\">\n            Export CSV\n        </Button>\n    );\n};\n\nexport default ExportCSV;\n","import React, { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport useYears, { getByUUID } from \"../hooks/useYears\";\nimport { v4 as uuid } from \"uuid\";\nimport YearData from \"../interfaces/Year\";\nimport useProblems, { Problem } from \"../hooks/useProblems\";\nimport ErrorStack from \"./ErrorStack\";\nimport useCourses from \"../hooks/useCourses\";\nimport { Button, Dropdown, ButtonGroup } from \"react-bootstrap\";\nimport {\n    handleSemesterFormInput,\n    handleSemesterFormSubmit,\n} from \"../util/events/SemesterFormEvents\";\nimport Year from \"./Year/Year\";\nimport { Plans } from \"../hooks/usePlans\";\nimport CourseData from \"../interfaces/Course\";\nimport MetRequirementsTable from \"./MetRequirementsTable\";\nimport ExportCSV from \"./ExportCSV\";\n\nexport interface SchedulerProps {\n    /**All the course ID's for the requirements for the degree this scheduler is designed to help acquire. */\n    requirements: Array<string>;\n    plans: Plans;\n    scheduleId: string;    \n}\n\n\nfunction getStartingYears(): Array<YearData> {\n    const year = new Date().getFullYear();\n\n    const output = new Array<YearData>();\n    const yearOne: YearData = { index: 1, uuid: uuid(), semesters: [] };\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year}-08-31`),\n        end: new Date(`${year}-12-15`),\n    });\n    yearOne.semesters.push({\n        uuid: uuid(),\n        name: \"spring\",\n        start: new Date(`${year + 1}-02-07`),\n        end: new Date(`${year + 1}-05-26`),\n    });\n    const yearTwo: YearData = { index: 2, uuid: uuid(), semesters: [] };\n    yearTwo.semesters.push({\n        uuid: uuid(),\n        name: \"fall\",\n        start: new Date(`${year + 1}-08-31`),\n        end: new Date(`${year + 1}-12-15`),\n    });\n    output.push(yearOne);\n    output.push(yearTwo);\n    return output;\n}\n\nfunction hasError(problems: Array<Problem>): boolean {\n    for (const problem of problems) {\n        if (problem.error) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function Scheduler(scheduleProps: SchedulerProps): JSX.Element {\n    let years = useYears(getStartingYears);\n\n    let getCurrentYears: () => Array<YearData> = getStartingYears;\n    let currentCourses: Array<CourseData> | undefined = undefined;\n\n    const planId = getByUUID(scheduleProps.plans.planList, scheduleProps.scheduleId);\n    // initialize years and courses\n    if (planId !== -1){\n\n        const plan = scheduleProps.plans.planList[planId];\n        if ( plan.years !== undefined && plan.years.length > 0){\n            getCurrentYears = () => {\n                if (plan.years){\n                    return plan.years;\n                }else{\n                    return new Array<YearData>();\n                }\n            };\n            \n        }\n        if (plan.courses !== undefined && plan.courses.length > 0){\n            if (plan.courses){\n                currentCourses = plan.courses;\n            }\n        }\n    }\n    years = useYears(getCurrentYears);\n\n    const courses = useCourses(currentCourses);\n    //The requirements for the degree that are not present in the plan\n    const [unmetRequirements, setUnmetRequirements] = useState<Array<string>>(\n        []\n    );\n    //The name of the new semester (null if the form is closed or nothing has been entered)\n    const [newName, setNewName] = useState<string | null>(null);\n    //The starting date of the new semester as a string (null if the form is closed or nothing has been entered)\n    const [newStart, setNewStart] = useState<string | null>(null);\n    //The ending date of the new semester as a string (null if the form is closed or nothing has been entered)\n    const [newEnd, setNewEnd] = useState<string | null>(null);\n    //The semester form that is currently open; kept track of here to ensure no more than 1 of these forms can be active at once\n    const [currentForm, setCurrentForm] = useState<string | null>(null);\n    //Whether or not the form to create a new semester can be submitted\n    const [submissionAllowed, setSubmissionAllowed] = useState(false);\n    //The problems with the user's current inputs\n\n    const problems = useProblems();\n    const setForm = (uuid: string | null) => {\n        setCurrentForm(uuid);\n        setSubmissionAllowed(false);\n        setNewName(null);\n        setNewStart(null);\n        setNewEnd(null);\n        problems.clear(\"semester-form\");\n    };\n    const handleSemesterInput = (event: ChangeEvent<HTMLInputElement>) => {\n        handleSemesterFormInput(\n            event,\n            newStart,\n            newEnd,\n            setNewName,\n            setNewStart,\n            setNewEnd,\n            years,\n            currentForm,\n            problems\n        );\n    };\n\n    const handleSemesterSubmit = (\n        event: FormEvent<HTMLFormElement>,\n        id: string\n    ) => {\n        handleSemesterFormSubmit(\n            event,\n            id,\n            newName,\n            newStart,\n            newEnd,\n            () => {\n                setForm(null);\n            },\n            years.putSemester\n        );\n    };\n    const getByCourseID = (\n        courseList: CourseData[],\n        courseID: string\n    ): number => {\n        for (let i = 0; i < courseList.length; i++) {\n            if (courseList[i].id === courseID) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    //set if courses match requirements using props.requirements\n    useEffect(() => {\n        const requirements = scheduleProps.requirements;\n        const newCourses = Array<string>();\n\n        for (const requirement of requirements) {\n            if (getByCourseID(courses.courseList, requirement) === -1) {\n                newCourses.push(requirement);\n            }\n        }\n\n        setUnmetRequirements(newCourses);\n    }, [scheduleProps.requirements, courses.courseList]);\n\n\n\n    useEffect(() => {\n        scheduleProps.plans.setYears(scheduleProps.scheduleId, years.value);\n        scheduleProps.plans.setCourses(scheduleProps.scheduleId, courses.courseList);\n    }, [years.value, courses.courseList]);\n\n    if (\n        newName &&\n        newEnd &&\n        newStart &&\n        !submissionAllowed &&\n        !hasError(problems.value)\n    ) {\n        setSubmissionAllowed(true);\n    } else if (\n        (!newName || !newEnd || !newStart || hasError(problems.value)) &&\n        submissionAllowed\n    ) {\n        setSubmissionAllowed(false);\n    }\n    return (\n        <>\n            <h1 className=\"center \">Course Schedule</h1>\n            <ExportCSV courses={courses} years={years}></ExportCSV>\n            <MetRequirementsTable\n                requirements={scheduleProps.requirements}\n                unmetRequirements={unmetRequirements}\n            />\n            <div>\n                {years.value.map((props: YearData) => {\n                    return (\n                        <Year\n                            key={props.uuid}\n                            clearYear={() => {\n                                years.clearYears(props.uuid);\n                            }}\n                            removeYear={() => {\n                                years.removeYears(props.uuid);\n                            }}\n                            removeSemester={(semesterUuid: string) => {\n                                years.removeSemester(props.uuid, semesterUuid);\n                            }}\n                            courses={courses.courseList}\n                            addCourse={courses.push}\n                            moveCourse={courses.move}\n                            removeCourse={courses.removeCourse}\n                            index={props.index}\n                            uuid={props.uuid}\n                            handleSemesterSubmit={handleSemesterSubmit}\n                            handleSemesterInput={handleSemesterInput}\n                            semesters={props.semesters}\n                            currentForm={currentForm}\n                            setForm={setForm}\n                            submissionAllowed={submissionAllowed}\n                            requirements={unmetRequirements}\n                        />\n                    );\n                })}\n\n                <div className=\"center\">\n                    <Dropdown id=\"add-year-dropdown\" as={ButtonGroup}>\n                        <Button\n                            onClick={() => {\n                                years.push(uuid(), years.value.length + 1);\n                            }}\n                            data-testid=\"add-year-button\"\n                            variant=\"success\"\n                        >\n                            Add Year +\n                        </Button>\n\n                        <Dropdown.Toggle\n                            split\n                            variant=\"success\"\n                            id=\"dropdown-split-basic\"\n                            data-testid=\"clear-remove-years-toggle\"\n                        />\n\n                        <Dropdown.Menu>\n                            <Dropdown.Item\n                                style={{ color: \"#DC3E45\" }}\n                                onClick={() => {\n                                    years.clearYears();\n                                }}\n                                data-testid=\"clear-years-button\"\n                            >\n                                Clear Years\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                                style={{ color: \"#DC3E45\" }}\n                                onClick={() => {\n                                    years.removeYears();\n                                }}\n                                data-testid=\"remove-years-button\"\n                            >\n                                Remove All Years\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </div>\n            </div>\n\n            <ErrorStack problems={problems.value} />\n        </>\n    );\n}\n","import { getByUUID, Years } from \"../../hooks/useYears\";\nimport validate from \"../validation/dates\";\nimport { ChangeEvent } from \"react\";\nimport { ProblemsInterface } from \"../../hooks/useProblems\";\nimport {v4 as uuid} from \"uuid\";\nimport { FormEvent } from \"react\";\n\nexport function handleSemesterFormInput(event: ChangeEvent<HTMLInputElement>, newStart: string | null, newEnd: string | null, setNewName: (name: string | null) => void, setNewStart: (start: string | null) => void, setNewEnd: (end: string | null) => void, years: Years, currentForm: string | null, problems: ProblemsInterface): void{\n    switch (event.target.name) {\n    case \"season\": {\n        setNewName(event.target.value);\n        break;\n    }\n    case \"starts\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newDate,\n            newEnd !== null ? new Date(newEnd) : null,\n            semesters,\n            \"starts\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewStart(event.target.value);\n        break;\n    }\n    case \"ends\": {\n        const semesters =\n                years.value[\n                    getByUUID(years.value, currentForm as string)\n                ].semesters;\n        const newDate = new Date(event.target.value);\n        const newProblems = validate(\n            newStart !== null ? new Date(newStart) : null,\n            newDate,\n            semesters,\n            \"ends\"\n        );\n        if (newEnd === null) {\n            problems.clear(\"semester-form\");\n            if (newProblems.length === 1) {\n                problems.add(newProblems[0]);\n            }\n        } else {\n            problems.clear(\"semester-form\");\n            for (const problem of newProblems) {\n                problems.add(problem);\n            }\n        }\n        setNewEnd(event.target.value);\n        break;\n    }\n    }\n}\n\nexport function handleSemesterFormSubmit(event: FormEvent<HTMLFormElement>, id: string, newName: string | null, newStart: string | null, newEnd: string | null, resetForm: () => void, addSemester: (id: string, uuid: string, start: Date, end: Date, name: string) => void): void{\n    event.preventDefault();\n    if (newName !== null && newEnd !== null && newStart !== null) {\n        addSemester(\n            id,\n            uuid(),\n            new Date(newStart),\n            new Date(newEnd),\n            newName\n        );\n        resetForm();\n    }\n}","import React, { FC, useState } from \"react\";\nimport {\n    FormControl,\n    InputGroup,\n    Button,\n    Row,\n    Col,\n    Container,\n} from \"react-bootstrap\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\ntype RequirementsProps = RouteComponentProps & {\n    /**The current requirements. */\n    requirements: string[];\n    /**A function that removes a requirement from the list. */\n    onRemoveRequirement: (requirement: string) => void;\n    /**A function that adds requirements to the list. */\n    onAddRequirement: (requirement: string) => void;\n};\n\n/**A component that displays the requirements for a specific CIS degree. */\nconst Requirements: FC<RequirementsProps> = (props): JSX.Element => {\n    const { requirements, onRemoveRequirement, onAddRequirement } = props;\n    const [newRequirement, setNewRequirement] = useState(\"\");\n\n    const onSubmit = () => {\n        onAddRequirement(newRequirement);\n    };\n    return (\n        <Container className=\"flex-column-reverse\">\n            <h3 className=\"center\">Computer Science Requirements</h3>\n            {requirements.map((requirement) => \n                <Row\n                    key={requirement}\n                    className=\"justify-content-md-center my-3\"\n                >\n                    <Col xs lg=\"2\">\n                        {\" \"}\n                        {requirement}{\" \"}\n                    </Col>\n                    <Col xs lg=\"2\">\n                        <Button\n                            onClick={() => onRemoveRequirement(requirement)}\n                            data-testid=\"remove-requirement\"\n                        >\n                            Remove\n                        </Button>\n                    </Col>\n                </Row>\n            )}\n            <Row className=\"justify-content-md-center my-3\">\n                <InputGroup className=\"mb-3\" style={{ width: \"50%\" }}>\n                    <FormControl\n                        placeholder=\"Requirement eg. CISC220\"\n                        value={newRequirement}\n                        onChange={(el) => {\n                            setNewRequirement(el.target.value);\n                        }}\n                        aria-label=\"Text input with button\"\n                        title=\"requirement-input\"\n                    />\n                    <Button\n                        variant=\"outline-secondary\"\n                        title=\"Action\"\n                        id=\"segmented-button-dropdown-2\"\n                        onClick={onSubmit}\n                        data-testid=\"submit-requirement\"\n                    >\n                        Add Course\n                    </Button>\n                </InputGroup>\n            </Row>\n        </Container>\n    );\n};\n\nexport default Requirements;\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport ReactJoyride from \"react-joyride\";\n\nconst SchedulerWalkthrough: React.FunctionComponent = () => {\n    const [joyride, setJoyride] = useState({\n        run: false,\n        steps: [\n            {\n                title: \"Welcome to the Scheduler Page!\",\n                disableBeacon: true,\n                target: \".degree-requirements-wrapper\",\n                content:\n                    \"This is the page where you can edit the details of your degree plan.\",\n            },\n            {\n                title: \"Start here with your first year.\",\n                disableBeacon: true,\n                target: \".container-fluid\",\n                content:\n                    \"This is where you can begin to add the courses for your degree plan. Enter course name, course ID, description, whether it is a pre/corequisite and a number of credits. Or hit the dropdown to reset/remove the current semester.\",\n            },\n            {\n                title: \"Check which degree requirements are unmet here!\",\n                disableBeacon: true,\n                target: \".table\",\n                content:\n                    \"Here, you can find the requirements that you listed on the Modify Requirements page in order to complete your custom degree plan.\",\n            },\n            {\n                title: \"Click on 'Year 1' to get started!\",\n                disableBeacon: true,\n                target: \".container-fluid\",\n                content:\n                    \"Click the button by each semester to add courses to it. Good luck!\",\n            },\n        ],\n    });\n    \n    return (\n        <>\n            <div style={{ marginRight: \"2%\", textAlign: \"right\" }}>\n                <Button\n                    variant=\"danger\"\n                    data-testid=\"scheduler-walkthrough-button\"\n                    onClick={() => {\n                        setJoyride({ ...joyride, run: !joyride.run });\n                    }}\n                >\n                    Need Help?\n                </Button>\n            </div>\n            <ReactJoyride\n                steps={joyride.steps}\n                run={joyride.run}\n                continuous\n                showProgress\n                showSkipButton\n                styles={{\n                    tooltipContainer: {\n                        textAlign: \"left\",\n                    },\n                    buttonNext: {\n                        backgroundColor: \"#ff0044\",\n                    },\n                    buttonBack: {\n                        marginRight: 10,\n                    },\n                }}\n                locale={{\n                    last: \"End Tour\",\n                    skip: \"Close Tour\",\n                }}\n            />\n        </>\n    );\n};\n\nexport default SchedulerWalkthrough;\n","import React, { useState } from \"react\";\nimport ReactJoyride from \"react-joyride\";\n\nconst MainPageWalkthrough: React.FunctionComponent = () => {\n    const [joyride, setJoyride] = useState({\n        run: false,\n        steps: [\n            {\n                title: \"Welcome to the UD CIS Scheduler!\",\n                disableBeacon: true,\n                target: \".g-4\",\n                content:\n                    \"This is the main page where you can create, edit, duplicate, and delete individual degree plans.\",\n            },\n            {\n                title: \"Add Degree Plans here!\",\n                target: \".add-plan-card\",\n                content:\n                    \"This is where you can add a plan to start designing your own CIS degree plan.\",\n            },\n            {\n                title: \"Keep degree requirements up-to-date here!\",\n                target: \".home-page-reqs\",\n                content:\n                    \"Here, you can modify the requirements needed to complete your custom degree plan.\",\n            },\n            {\n                title: \"More resources available as well!\",\n                target: \".home-page-resources\",\n                content:\n                    \"Helpful links where you can find the CIS Course Catalog, your UDSIS, and the CISC Department Page.\",\n            },\n            {\n                title: \"Good Luck!\",\n                target: \".add-plan-card\",\n                content: \"Add a plan to get started.\",\n            },\n        ],\n    });\n\n    return (\n        <>\n            <div\n                id=\"text\"\n                data-testid={\"main-page-walkthrough-modal\"}\n                style={{\n                    marginLeft: \"2%\",\n                    marginRight: \"auto\",\n                    padding: \"0.5rem\",\n                    color: \"black\",\n                    opacity: 0.55,\n                    cursor: \"pointer\",\n                }}\n                onClick={() => setJoyride({ ...joyride, run: !joyride.run })}\n            >\n                <a>Tutorial</a>\n            </div>\n            <ReactJoyride\n                steps={joyride.steps}\n                run={joyride.run}\n                continuous\n                showProgress\n                showSkipButton\n                styles={{\n                    tooltipContainer: {\n                        textAlign: \"left\",\n                    },\n                    buttonNext: {\n                        backgroundColor: \"#ff0044\",\n                    },\n                    buttonBack: {\n                        marginRight: 10,\n                    },\n                }}\n                locale={{\n                    last: \"End Tour\",\n                    skip: \"Close Tour\",\n                }}\n            />\n        </>\n    );\n};\n\nexport default MainPageWalkthrough;\n","import React from \"react\";\nimport { Container, Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport MainPageWalkthrough from \"./MainPageWalkthrough\";\n\nconst NavigationBar = (): JSX.Element => {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Container>\n                <Navbar.Brand as={Link} to=\"/\">\n                    Scheduler\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\" data-testid=\"open-bar\">\n                    <Nav className=\"me-auto\">\n                        <Nav.Link as={Link} to=\"/\">\n                            Home\n                        </Nav.Link>\n                        <Nav.Link as={MainPageWalkthrough}>\n                            Tutorial\n                        </Nav.Link>\n                        <Nav.Link as={Link} className=\"home-page-reqs\"to=\"/Requirements\">\n                            Requirements\n                        </Nav.Link>\n                        <NavDropdown title=\"Resources\" className=\"home-page-resources\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"https://catalog.udel.edu/\">\n                                Course Catalog\n                            </NavDropdown.Item>\n                            <NavDropdown.Item href=\"https://my.udel.edu/task/all/udsisstudent\">\n                                UDSIS\n                            </NavDropdown.Item>\n                            <NavDropdown.Item href=\"https://www.cis.udel.edu/\">\n                                CISC Department Page\n                            </NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item href=\"https://github.com/perezmas/scheduler/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                Github Repo\n                            </NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n};\n\nexport default NavigationBar;\n","import React from \"react\";\nimport {\n    Button,\n    Card,\n    Col,\n    Container,\n    Row,\n    Dropdown,\n    ButtonGroup,\n} from \"react-bootstrap\";\nimport \"./styles.css\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport PlanData from \"../interfaces/Plan\";\nimport { Plans } from \"../hooks/usePlans\";\n\ninterface PlanPageProps {\n    plans: Plans;\n}\n\n/**A card on the home screen that lets the user move between schedulers, mainly so that advisors can keep track of their students. */\nexport function PlanPage(props: PlanPageProps): JSX.Element {\n    const { plans } = props;\n\n    const addPlan = () => {\n        // adds plan with new unique id\n        plans.addPlan(uuid());\n    };\n\n    const deleteCard = (planItem: PlanData) => {\n        // asks if you want to delete plan and deletes it\n        if (window.confirm(\"Are you sure you want to delete this plan?\")) {\n            plans.deletePlan(planItem.uuid);\n        }\n    };\n\n    const copy = (planItem: PlanData) => {\n        // makes copy of given plan\n        plans.copyPlan(planItem.uuid, planItem);\n    };\n\n    const renderCard = (planItem: PlanData) => {\n        localStorage.setItem(\"Plans Array\", JSON.stringify(plans));\n        return (\n            <Card\n                className=\"plan-card flex-row\"\n                style={{\n                    alignItems: \"center\",\n                    justifyContent: \"space-evenly\",\n                    height: \"100%\",\n                }}\n            >\n                <Card.Body style={{ flex: \"0 1 auto\" }}>\n                    <Card.Title>Plan #{planItem.id} </Card.Title>\n                    <Card.Text\n                        style={{ fontWeight: \"lighter\", fontSize: \"0.85rem\" }}\n                    >\n                        {planItem.date}\n                    </Card.Text>\n                </Card.Body>\n                <Dropdown as={ButtonGroup}>\n                    <Button\n                        as={Link}\n                        to={`Plans/${planItem.uuid}`}\n                        variant=\"success\"\n                        data-testid=\"edit-plan\"\n                    >\n                        Edit Plan\n                    </Button>\n\n                    <Dropdown.Toggle\n                        split\n                        variant=\"success\"\n                        id=\"dropdown-split-basic\"\n                        data-testid=\"plan-toggle\"\n                    />\n\n                    <Dropdown.Menu>\n                        <Dropdown.Item\n                            onClick={() => {\n                                copy(planItem);\n                            }}\n                            data-testid=\"copy-plan\"\n                        >\n                            Duplicate Plan\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            style={{ color: \"#DC3E45\" }}\n                            color=\"white\"\n                            onClick={() => {\n                                deleteCard(planItem);\n                            }}\n                            data-testid=\"delete-plan\"\n                        >\n                            Remove Plan\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Card>\n        );\n    };\n    return (\n        <Container>\n            <Row xs={1} md={3} className=\"g-4\">\n                {plans.planList.map((planItem: PlanData) => \n                    <Col key={planItem.uuid}>{renderCard(planItem)}</Col>\n                )}\n                <Col>\n                    <Card\n                        bg=\"light\"\n                        className=\"add-plan-card\"\n                        style={{ height: \"100%\" }}\n                    >\n                        <Button\n                            id=\"add-plan-button\"\n                            data-testid=\"add-plan\"\n                            onClick={addPlan}\n                        >\n                            Add a plan <br />{\" \"}\n                            <span id=\"add-plan-icon\"> + </span>\n                        </Button>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default PlanPage;\n","import React, { FC } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Plans } from \"../hooks/usePlans\";\nimport PlanPage from \"./PlanPage\";\n\ntype IndexPageProps = RouteComponentProps & {\n    plans: Plans;\n};\nconst IndexPage: FC<IndexPageProps> = (props) => {\n    const { plans } = props;\n    return (\n        <div className=\"home\">\n            <div className=\"home-content\">\n                <h1 className=\"center mb-5\">UD CIS Scheduler</h1>\n                <PlanPage plans={plans} />\n            </div>\n        </div>\n    );\n};\n\nexport default IndexPage;\n","import { useReducer } from \"react\";\nimport CourseData from \"../interfaces/Course\";\nimport PlanData from \"../interfaces/Plan\";\nimport YearData from \"../interfaces/Year\";\nimport { getByUUID } from \"./useYears\";\nimport SemesterData from \"../interfaces/Semester\";\nimport { v4 as uuid } from \"uuid\";\n\ntype PlanActionType = \n\"ADD PLAN\" |\n\"DELETE PLAN\" |\n\"COPY PLAN\" |\n  \"SET YEARS\"\n| \"SET SEMESTERS\"\n| \"SET COURSES\";\n\ninterface AbstractAction {\n    type: PlanActionType;\n    uuid: string;\n}\n\nexport interface AddPlanAction extends AbstractAction {\n    type: \"ADD PLAN\";\n    planList: Array<PlanData>;\n}\n\nexport interface DeletePlanAction extends AbstractAction {\n    type: \"DELETE PLAN\";\n}\n\nexport interface CopyPlanAction extends AbstractAction {\n    type: \"COPY PLAN\";\n    planItem: PlanData;\n}\n\nexport interface SetYearAction extends AbstractAction {\n    type: \"SET YEARS\";\n    yearList: Array<YearData>;\n}\n\nexport interface SetSemesterAction extends AbstractAction {\n    type: \"SET SEMESTERS\";\n    semesterList: Array<SemesterData>;\n}\n\nexport interface SetCourseAction extends AbstractAction {\n    type: \"SET COURSES\";\n    courseList: Array<CourseData>;\n}\n\n\ntype PlanAction<T extends PlanActionType> = \nT extends \"ADD PLAN\" ? AddPlanAction :\nT extends \"DELETE PLAN\" ? DeletePlanAction :\nT extends \"COPY PLAN\" ? CopyPlanAction :\nT extends \"SET YEARS\" ? SetYearAction :\nT extends \"SET SEMESTERS\" ? SetSemesterAction : \nSetCourseAction\n\nfunction PlanReducer<T extends PlanActionType>(\n    prev: Array<PlanData>,\n    action: PlanAction<T>\n): Array<PlanData> {\n    const next = prev.map((x: PlanData) => {\n        return {...x};\n    });\n    switch (action.type) {\n    case \"ADD PLAN\": {\n        const addPlan = action as AddPlanAction;\n        const NewPlan: PlanData = {\n            id: next.length+1,\n            uuid: addPlan.uuid,\n            years: new Array<YearData>(),\n            semesters: new Array<SemesterData>(),\n            courses: new Array<CourseData>(),\n        }; \n        next.push(NewPlan);\n        return next;\n    }\n    case \"DELETE PLAN\": {\n        const deletePlan = action as DeletePlanAction;\n        const output = next.filter((value: PlanData) => {\n            return value.uuid !== deletePlan.uuid;\n        });\n        return output;\n    }\n    case \"COPY PLAN\": {\n        const copyPlan = action as CopyPlanAction;\n        const target = getByUUID(next, copyPlan.uuid);\n        const NewCopiedPlan: PlanData = {\n            id: next[target].id,\n            uuid: uuid(),\n            years: next[target].years,\n            semesters: next[target].semesters,\n            courses: next[target].courses,\n        }; \n        next.push(NewCopiedPlan);\n        return next;\n    }\n    case \"SET YEARS\": {\n        const setYears = action as SetYearAction;\n        const target = getByUUID(next, setYears.uuid);\n        const years = setYears.yearList;\n        next[target].years = years;\n        return next;\n    }\n    case \"SET SEMESTERS\": {\n        const setSemesters = action as SetSemesterAction;\n        const target = getByUUID(next, setSemesters.uuid);\n        const semesters = setSemesters.semesterList;\n        next[target].semesters = semesters;\n        return next;\n    }\n    case \"SET COURSES\": {\n        const setCourses = action as SetCourseAction;\n        const target = getByUUID(next, setCourses.uuid);\n        const courses = setCourses.courseList;\n        next[target].courses = courses;\n        return next;\n    }\n    default:\n        throw new Error(\"Unknown action type\");\n    }\n}\n\nexport interface Plans {\n    planList: Array<PlanData>;\n    setYears: (uuid: string, yearList: Array<YearData>) => void;\n    setCourses: (uuid: string, courseList: Array<CourseData>) => void;\n    addPlan: (uuid: string) => void;\n    deletePlan: (uuid: string) => void;\n    copyPlan: (uuid: string, planItem: PlanData) => void;\n}\n\nfunction usePlans(initialPlans?: () => Array<PlanData>): Plans {\n    const [plans, setPlans] = useReducer(\n        PlanReducer,\n        undefined,\n        initialPlans === undefined\n            ? () => {\n                return new Array<PlanData>();\n            } : initialPlans\n    );\n\n    const setYears = (uuid: string, yearList: Array<YearData>) => {\n        if ( yearList !== undefined) {\n            setPlans({\n                type: \"SET YEARS\",\n                uuid: uuid,\n                yearList: yearList,\n            });\n        }\n    };\n\n    const setCourses = (uuid: string, courseList: Array<CourseData>) => {\n        setPlans({\n            type: \"SET COURSES\",\n            uuid: uuid,\n            courseList: courseList,\n        });\n    };\n\n    const addPlan = (uuid: string) => {\n        setPlans({\n            type: \"ADD PLAN\",\n            uuid: uuid,\n            planList: Array<PlanData>(),\n        });\n    };\n\n    const deletePlan = (uuid: string) => {\n        setPlans({\n            type: \"DELETE PLAN\",\n            uuid: uuid,\n        });\n    };\n\n    const copyPlan = (uuid: string, planItem: PlanData) => {\n        setPlans({\n            type: \"COPY PLAN\",\n            uuid: uuid,\n            planItem: planItem,\n        });\n    };\n\n    return {\n        planList: plans,\n        setYears,\n        setCourses,\n        addPlan,\n        deletePlan,\n        copyPlan,\n    };\n}\nexport default usePlans;","import React, { FC, useState } from \"react\";\nimport \"./Year.css\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n    HashRouter as Router,\n    Route,\n    HashRouter,\n    RouteComponentProps,\n} from \"react-router-dom\";\nimport { Switch } from \"react-router-dom\";\n\nimport { Scheduler } from \"./components/Scheduler\";\nimport Requirements from \"./components/Requirements\";\nimport SchedulerWalkthrough from \"./components/SchedulerWalkthrough\";\nimport NavigationBar from \"./components/NavigationBar\";\nimport IndexPage from \"./components/IndexPage\";\nimport {DndProvider} from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport usePlans, { Plans } from \"./hooks/usePlans\";\nimport { getByUUID } from \"./hooks/useYears\";\n\n// Master Plan View\n\ntype PlansPageProps = RouteComponentProps<MatchParams> & {\n    requirements: string[];\n    plans: Plans; \n};\n\ninterface MatchParams {\n    uuid: string;\n}\n\nconst Plan: FC<PlansPageProps> = (props) => {\n    const uuid = props.match.params.uuid;\n    const checkUuid = getByUUID(props.plans.planList, uuid);\n    // if plans exist, generate page with proper plans otherwise display error page\n    if (checkUuid !== -1){\n        return (\n            <>\n                <SchedulerWalkthrough />\n                <p></p>\n                <DndProvider backend={HTML5Backend}>\n                    <Scheduler requirements={props.requirements} plans={props.plans} scheduleId={uuid} />\n                </DndProvider>\n                \n            </>\n        );\n    }else{\n        return (\n            <>\n                <p>Page does not exist. Check the URL and try again.</p>\n            </>\n        );\n    }\n    \n};\n\nfunction App(): JSX.Element {\n    const plans = usePlans();\n    const [requirements, setRequirements] = useState<string[]>(\n        Array<string>(\"CISC220\", \"CISC275\", \"MATH243\")\n    );\n    const addRequirement = (requirement: string) => {\n        setRequirements([...requirements, requirement]);\n    };\n    const removeRequirement = (requirement: string) => {\n        setRequirements(requirements.filter((r) => r !== requirement));\n    };\n    return (\n        <HashRouter>\n            <div>\n                <NavigationBar />\n            </div>\n            <Switch>\n                <Router>\n                    <Route\n                        path=\"/Plans/:uuid\"\n                        render={(props) => \n                            <Plan {...props} requirements={requirements} plans={plans} />\n                        }\n                    ></Route>\n                    <Route\n                        path=\"/Requirements\"\n                        render={(props) => \n                            <Requirements\n                                {...props}\n                                requirements={requirements}\n                                onAddRequirement={addRequirement}\n                                onRemoveRequirement={removeRequirement}\n                            />\n                        }\n                    ></Route>\n                    <Route\n                        path=\"/\"\n                        exact\n                        render={(props) => \n                            <IndexPage\n                                {...props}\n                                plans={plans}\n                            />\n                        }\n                    ></Route>\n                </Router>\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\ndocument.title = \"CIS Scheduler\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}